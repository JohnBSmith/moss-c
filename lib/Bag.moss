
sub bag(d)
  table[bag.type]
    d=dict(d.items().filter(|t| t[1]!=0))
  end
end

bag.type = table
  str = sub||
    str(self.d)
  end,
  iter = sub||
    iter(self.d)
  end,
  sub GET(x)
    self.d[x] if x in self.d else 0
  end,
  sub RIN(b)
    self in b.d and b.d[self]!=0
  end,
  sub LE(b)
    d = self.d
    d.all(|x| d[x]<=b[x])
  end,
  sub LT(b)
    d = self.d
    d.all(|x| d[x]<b[x])
  end,
  sub EQ(b)
    self.d==b.d
  end,
  sub ADD(a;b)
    m = set(a)|set(b)
    table[bag.type]
      d=dict(m.map(|x| [x,a[x]+b[x]]))
    end
  end,
  sub BOR(a;b)
    m = set(a)|set(b)
    table[bag.type]
      d=dict(m.map(|x| [x,max(a[x],b[x])]))
    end
  end,
  sub BAND(b)
    a = self.d
    table[bag.type]
      d = dict(a.map(sub|x|
        [x,min(a[x],b[x])]
      end).filter(|t| t[1]!=0))
    end
  end,
  sub MPY(b)
    a = self.d
    table[bag.type]
      d = dict(a.map(sub|x|
        [x,a[x]*b[x]]
      end).filter(|t| t[1]!=0))
    end
  end,
  sub SUB(b)
    a = self.d
    table[bag.type]
      d = dict(a.map(sub|x|
        [x,a[x]-b[x]]
      end).filter(|t| t[1]>0))
    end
  end,
  sub count
    self.d.values().sum()
  end
end




