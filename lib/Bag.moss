
function bag(d)
  table Bag {
    d = dict(d.items().filter(|t| t[1]!=0))
  }
end

Bag = table{
  str = function||
    str(self.d)
  end,
  iter = function||
    iter(self.d)
  end,
  function get(x)
    self.d[x] if x in self.d else 0
  end,
  function rin(b)
    self in b.d and b.d[self]!=0
  end,
  function le(b)
    d = self.d
    d.all(|x| d[x]<=b[x])
  end,
  function lt(b)
    d = self.d
    d.all(|x| d[x]<b[x])
  end,
  function eq(b)
    self.d==b.d
  end,
  function add(a;b)
    m = set(a)|set(b)
    table[Bag]
      d=dict(m.map(|x| [x,a[x]+b[x]]))
    end
  end,
  function bor(a;b)
    m = set(a)|set(b)
    table[Bag]
      d=dict(m.map(|x| [x,max(a[x],b[x])]))
    end
  end,
  function band(b)
    a = self.d
    table[Bag]
      d = dict(a.map(fn|x|
        [x,min(a[x],b[x])]
      end).filter(|t| t[1]!=0))
    end
  end,
  function mul(b)
    a = self.d
    table[Bag]
      d = dict(a.map(fn|x|
        [x,a[x]*b[x]]
      end).filter(|t| t[1]!=0))
    end
  end,
  function sub(b)
    a = self.d
    table[Bag]
      d = dict(a.map(fn|x|
        [x,a[x]-b[x]]
      end).filter(|t| t[1]>0))
    end
  end,
  function count
    self.d.values().sum()
  end
}




