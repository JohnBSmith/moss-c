

CasError = object()

ScanError = table CasError{
  function string
    return [self.s,"\n",self.value].join()
  end
}

SyntaxError = table CasError{
  function string
    return ["Syntax error in col ", self.col+1, ": ",self.value].join()
  end
}

function scan_error(s,i,info)
  s=s+"\n"+"\s"*i+"^"
  return table ScanError{value=info, s=s}
end

function syntax_error(x,s)
  raise table SyntaxError{value=s, line=x[2], col=x[3]}
end

function scan(s)
  a=[]
  i=0; n=size(s)
  while i<n
    c=s[i]
    if c=='='
      if i+1<n and s[i+1]=='='
        a.push(["op","==",0,i])
        i+=2
      else
        a.push(["op","=",0,i])
        i++
      end
    elif c in "<>"
      if i+1<n and s[i+1]=='='
        a.push(["op",s[i]+"=",0,i])
        i+=2
      else
        a.push(["op",c,i])
        i++
      end
    elif c in "+-*%/^"
      a.push(["op",c,0,i])
      i++
    elif c.isalpha()
      j=i
      while i<n and s[i].isalnum() do i++
      end
      a.push(["id",s[j..i-1],0,j])
    elif c.isdigit()
      j=i
      while i<n and s[i].isdigit() do i++
      end
      a.push(["int",s[j..i-1],0,j])
    elif c in "([{"
      a.push(["bleft",c,0,i])
      i++
    elif c in ")]}"
      a.push(["bright",c,0,i])
      i++
    elif c in ",;"
      a.push(["sep",c,0,i])
      i++
    elif c.isspace()
      i++
    else
      raise scan_error(s,i,"Syntax error: unexpected character: "+c+".")
    end
  end of while
  a.push(["terminal","",0,i])
  return a
end

function lookup_token(i)
  if i[1]>=size(i[0])
    return null
  else
    return i[0][i[1]]
  end
end

function next_token(i)
  i[1]++
end

function get_token(i)
  if i[1]>=size(i[0])
    syntax_error([0,0,0,i[0][-1][3]],"Expected token.")
  else
    i[1]++
    return i[0][i[1]-1]
  end
end

function atom(i)
  x = get_token(i)
  if x[0]=="int"
    return int(x[1])
  elif x[0]=="id"
    return x[1]
  elif x[0]=="bleft" and x[1]=="("
    t=expression(i)
    x=get_token(i)
    if x[0]!="bright" or x[1]!=")"
      syntax_error(x,"Expected ')'.")
    end
    return t
  else
    raise "Error: unexpected token: "+str(x)
  end
end

function atomic_expression(i)
  t1 = atom(i)
  x = lookup_token(i)
  if x[0]=="bleft" and x[1]=="("
    next_token(i)
    a=[]
    while true
      t = expression(i)
      a.push(t)
      x = lookup_token(i)
      if x[0]=="bright" and x[1]==")"
        next_token(i)
        break
      elif x[0]=="sep" and x[1]==","
        next_token(i)
        continue
      else
        syntax_error(x,"Expected ')' or ','.")
      end
    end
    return [t1,a]
  end
  return t1
end

function power(i)
  t1=atomic_expression(i)
  x = lookup_token(i)
  if x[0]=="op" and x[1]=="^"
    next_token(i)
    return ["^",[t1,factor(i)]]
  else
    return t1
  end
end

function factor(i)
  x = lookup_token(i)
  if x[0]=="op"
    if x[1]=="-"
      next_token(i)
      t = factor(i)
      return -t if type(t) is Int else ["*",[-1,t]]
    elif x[1]=="+"
      next_token(i)
      return factor(i)
    end
  end
  return power(i)
end

function mpy(i)
  t1=factor(i)
  x = lookup_token(i)
  if x[0]=="op" and x[1] in "*/"
    a=[t1]
    while true
      x=lookup_token(i)
      if x[0]=="op"
        if x[1]=="*"
          next_token(i)
          a.push(factor(i))
        elif x[1]=="/"
          next_token(i)
          a.push(["^",[factor(i),-1]])
        else
          break
        end
      else
        break
      end
    end
    return ["*",a]
  end
  return t1
end

function add(i)
  t1 = mpy(i)
  x = lookup_token(i)
  if x[0]=="op" and x[1] in "+-"
    a=[t1]
    while true
      x = lookup_token(i)
      if x[0]=="op"
        if x[1]=="+"
          next_token(i)
          a.push(mpy(i))
        elif x[1]=="-"
          next_token(i)
          t = mpy(i)
          a.push(-t if type(t) is Int else ["*",[-1,t]])
        else
          break
        end
      else
        break
      end
    end
    return ["+",a]
  end
  return t1
end

function assignment(i)
  t1 = add(i)
  x = lookup_token(i)
  if x[0]=="op" and x[1]=="="
    next_token(i)
    t2 = add(i)
    return ["=",[t1,t2]]
  end
  return t1
end

function expression(i)
  return assignment(i)
end

function ast(a)
  if size(a)==0
    return null
  end
  i=[a,0]
  return expression(i)
end

function ast_print(t,n)
  T=type(t)
  if T is Int or T is String
    print("\s"*n,t)
  elif T is List
    print("\s"*n,t[0])
    for u in t[1]
      ast_print(u,n+2)
    end
  elif T is null
    print("\s"*n,"empty tree")
  else
    raise "Error: cannot print AST node."
  end
end

infix = {
  "+", "*", "^", "="
}

prefix = {
  "u-": "-"
}

precedence = {
  "^": 40,
  "*": 30,
  "+": 20,
  "=": 10
}

function parentheses(u,t)
  s = ast_to_string(u)
  if type(u) is List and u[0] in infix
    if precedence[u[0]]<precedence[t[0]]
      s=["(",s,")"].join()
    end
  end
  return s
end

function summand_to_string(u,first)
  T = type(u)
  if T is List and u[0]=="*" and size(u[1])>0
    f=u[1][0]
    if type(f) is Int and f<0
      if f==-1
        return "-"+u[1][1..].map(|v| parentheses(v,u)).join("*")
      else
        return ast_to_string(u)
      end
    end
  elif T is Int
    if u<0
      return str(u)
    end
  end
  return ("" if first else "+")+ast_to_string(u)
end

function negation_to_string(t)
  a = t[1][1..]
  if size(a)>1
    return "-"+a.map(|u| parentheses(u,t)).join("*")
  else
    return "-"+parentheses(a[0],t)
  end
end

function ast_to_string(t)
  if t is null
    return null
  end
  T = type(t)
  if T is Int or T is String
    return str(t)
  elif T is List
    if t[0] in infix
      if t[0]=="+"
        a=[]; Lu=t[1]
        a.push(summand_to_string(Lu[0],true))
        for u in Lu[1..]
          a.push(summand_to_string(u,false))
        end
        return a.join()
      elif t[0]=="*" and t[1][0]==-1
        return negation_to_string(t)
      else
        a = t[1].map(|u| parentheses(u,t))
        return a.join(t[0])
      end
    elif t[0] in prefix
      return prefix[t[0]]+ast_to_string(t[1][0])
    else
      return [t[0],"(",
        t[1].map(|u| ast_to_string(u)).join(", "),
      ")"].join()
    end
  else
    raise "ast_to_string exception"
  end
end


