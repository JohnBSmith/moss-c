

sub isconst(t,id)
  T = type(t)
  if T is Str
    return t!=id
  elif T is List
    return t[1].all(|u| isconst(u,id))
  end
  return true
end

sub substitute(t,id,s)
  T = type(t)
  if T is Str
    if t==id
      return s
    end
  elif T is List
    return [t[0],t[1].map(|u| substitute(u,id,s))]
  end
  return t
end

sub diff(t,id)
  T = type(t)
  if T is Str
    return (1 if t==id else 0)
  elif T is Int
    return 0
  elif T is List
    if t[0]=="+"
      a = t[1].map(|u| diff(u,id)).filter(|u| u!=0)
      return (["+",a] if size(a)>1 else a[0] if size(a)>0 else 0)
    elif t[0]=="*"
      a = t[1]
      b=[]
      for k in size(a)
        u = diff(a[k],id)
        ank = a[..k-1]+a[k+1..]
        if u==1
          b.push(["*",ank] if size(ank)>1 else ank[0])
        elif u!=0
          b.push(["*",[u]+ank])
        end
      end
      return (["+",b] if size(b)>1 else b[0] if size(b)!=0 else 0)
    elif t[0]=="^"
      x=t[1][0]; n=t[1][1]
      if isconst(x,id)
        n1=diff(n,id)
        return ["*",[t,["*",[
          ["ln",[x]],n1
        ]]]]
      elif isconst(n,id)
        x1=diff(x,id)
        a = ["^",[x,["+",[n,-1]]]]
        return ["*",[n,a] if x1==1 else [n,a,x1]]
      end
    end
  end
  return ["diff",[t,"x"]]
end

associative = {
  "+", "*", "compose", "max", "min"
}

sub flatten(t)
  T = type(t)
  if T is List
    op = t[0]
    t = [op,t[1].map(flatten)]
    if op in associative
      a=[]
      for u in t[1]
        if type(u) is List and u[0]==op
          a.extend(u[1])
        else
          a.push(u)
        end
      end
      return [op,a]
    end
  end
  return t
end

sub simplify_sum(a)
  s=0; d={}
  for t in a
    t=simplify(t)
    T = type(t)
    if T is Int
      s+=t
    elif T is List and t[0]=="*" and type(t[1][0]) is Int
      p = t[1][1..]
      p = p[0] if size(p)==1 else ["*",p]
      if p in d
        d[p]+=t[1][0]
      else
        d[p]=t[1][0]
      end
    elif t in d
      d[t]++
    else
      d[t]=1
    end
  end
  b = list(d).map(|u| u[0] if u[1]==1 else ["*",[u[1],u[0]]])
  return ["+",b+[s] if s!=0 else b]
end

sub simplify_prod(a)
  p=1; d={}
  for t in a
    t = simplify(t)
    T = type(t)
    if T is Int
      p=p*t
    elif T is List and t[0]=="^" and type(t[1][1]) is Int
      b=t[1][0]; e=t[1][1]
      if b in d
        d[p]+=e
      else
        d[p]=e
      end
    elif t in d
      d[t]++
    else
      d[t]=1
    end
  end
  b = list(d).map(|u| u[0] if u[1]==1 else ["^",u])
  return ["*",[p]+b if p!=1 else b]
end

sub simplify(t)
  t = flatten(t)
  T = type(t)
  if T is List
    if t[0]=="+"
      return simplify_sum(t[1])
    elif t[0]=="*"
      return simplify_prod(t[1])
    end
  end
  return t
end


