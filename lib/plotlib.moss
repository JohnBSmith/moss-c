
# a simple function grapher
use math: lg, tanh
use cmath: arg, re, im
use gx, time
use na

gw=960; gw2=gw//2
gh=640; gh2=gh//2

function setw(x,y)
  global gw,gh,gw2,gh2
  gw=x; gw2=gw//2
  gh=y; gh2=gh//2
end

function vline(c,x)
  c.fill(x,0,2,gh-1)
end

function hline(c,y)
  c.fill(0,y,gw-1,2)
end

function vbars(c,y)
  for t in vbars.a
    x = int(gw2+gw2/10*t)
    c.fill(x,y+2,2,2)
    c.fill(x,y,2,2)
    c.fill(x,y-2,2,2)
  end
end

function hbars(c,x)
  for t in hbars.a
    y = int(gh2+gw2/10*t)
    c.fill(x+2,y,2,2)
    c.fill(x,y,2,2)
    c.fill(x-2,y,2,2)
  end
end

vbars.a = [-8..-2:2, 2..8:2].chain()
hbars.a = [-8..-1, 1..8].chain()

function grid(c,a)
  c.cset(0.9,0.9,0.84,a)
  for x in -9..9
    vline(c,int(gw2+gw2/10*x))
  end
  for y in -10..10
    hline(c,int(gh2+gw2/10*y))
  end
  c.cset(0.7,0.7,0.64,a)
  vline(c,gw2)
  hline(c,gh2)
end

function ftos(w,p,x)
  a = abs(w)
  if abs(p)<10*a and (a<0.001 or a>10000000)
    return str(x,"-E",1)
  else
    n = 2+int(-lg(abs(w)))
    return str(x,"-f",n)
  end
end

function labels(c,wx,wy,px,py)
  c.cset(0.4,0.4,0.4)
  vbars(c,gh2)
  hbars(c,gw2)
  for x in 2..8:2
    c.pos(int(gw2+gw2/10*x)-24,gh2+8)
    c.print(ftos(wx,px,px+x*wx/10))
  end
  for x in -8..-2:2
    c.pos(int(gw2+gw2/10*x)-24,gh2+8)
    c.print(ftos(wx,px,px+x*wx/10))
  end
  for y in 1..6
    c.pos(gw2+4,int(gh2-gw2/10*y)-12)
    c.print(ftos(wy,py,py+y*wy/10))
  end
  for y in -6..-1
    c.pos(gw2+4,int(gh2-gw2/10*y)-12)
    c.print(ftos(wy,py,py+y*wy/10))
  end
end

color_table = [
  [0, 0, 0.4],
  [0, 0.4, 0],
  [0.6, 0, 0.6],
  [0, 0.4, 0.4],
  [0.4, 0, 0],
  [0.8, 0.6, 0],
  [0, 0, 0]
]

function plot(f,d={})
  s = system(d)
  s.plot(f,d)
  s.idle()
end

Plot = table{
  function idle
    c = self.canvas
    c.flush()
    while c.key()!="q"
      time.sleep(0.2)
    end
  end,
  
  function plot(a,t={})
    if type(a) is Function
      a=[a]
    end
    {n=self.n}=t
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    d = wx/n
    x1 = px-wx
    x2 = px+wx
    m = size(color_table)
    c = self.canvas
    point = c.point
    for f in a
      if "color" in t
        c.cset(t["color"])
      else
        c.cset(color_table[self.index%m])
        self.index++
      end
      x=x1
      while x<x2
        point(c;(x-px)/wx,(f(x)-py)/wy)
        x+=d
      end
    end
  end,

  function vplot(f,t={})
    {n=self.n, t1=0.0, t2=10.0} = t
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    d = abs(t2-t1)/n
    c = self.canvas
    point = c.point
    if "color" in t
      c.cset(t["color"])
    else
      m = size(color_table)
      c.cset(color_table[self.index%m])
      self.index++
    end
    t=t1
    while t<t2
      v=f(t)
      point(c;(v[0]-px)/wx,(v[1]-py)/wy)
      t+=d
    end
  end,

  function scatter(a,t={})
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    c = self.canvas
    if "color" in t
      c.cset(t["color"])
    else
      m = size(color_table)
      c.cset(color_table[self.index%m])
      self.index++
    end
    for v in a
      c.scatter((v[0]-px)/wx,(v[1]-py)/wy)
    end
  end,

  function box(a,t={})
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    c = self.canvas
    if "color" in t
      c.cset(t["color"])
    else
      m = size(color_table)
      c.cset(color_table[self.index%m])
      self.index++
    end
    for v in a
      c.box((v[0]-px)/wx,(v[1]-py)/wy)
    end
  end,

  function palette(i)
    self.index=i
  end,

  function interlace(f,t={})
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    x1 = px-wx
    x2 = px+wx
    c = self.canvas
    if "color" in t
      c.cset(t["color"])
    else
      c.cset(color_table[0])
    end
    d = wx/100
    while true
      k=0
      x=x1
      while x<x2
        c.point((x-px)/wx,(f(x)-py)/wy)
        x+=d
        if k%1000==0
          c.flush()
          if c.key()=="q" then return null
          end
          time.sleep(0.1)
        end
        k++
      end
      d=d/2
    end
  end,

  function random(f,t={})
    wx = self.wx; px = self.px
    wy = self.wy; py = self.py
    x1 = px-wx
    x2 = px+wx
    c = self.canvas
    if "color" in t
      c.cset(t["color"])
    else
      c.cset(color_table[0])
    end
    r = rand(194352)
    k=0
    while true
      x=x1+r()*(x2-x1)
      c.point((x-px)/wx,(f(x)-py)/wy)
      if k%1000==0
        c.flush()
        if c.key()=="q" then return null
        end
        time.sleep(0.1)
      end
      k++
    end
  end,

  function ani(callback,*argv)
    self.n=500
    c = self.canvas
    a=0
    while true
      c.clear(1,1,1)
      c.cset(0.7,0.7,0.64,1)
      vline(c,gw2)
      hline(c,gh2)
      labels(c,self.wx,self.wy,self.px,self.py)
      self.palette(0)
      callback(a)
      if c.key()=="q" then break
      end
      c.flush()
      time.sleep(0.02)
      a+=0.1
    end
  end,

  function flush
    self.canvas.flush()
  end
}

function system(t={})
  c=gx.new(gw,gh,1)
  c.font(16)
  s = table Plot{canvas=c, index=0}
  s.n  = t["n"]  if "n"  in t else 1000
  s.wx = t["wx"] if "wx" in t else 10.0
  s.wy = t["wy"] if "wy" in t else 10.0
  s.px = t["px"] if "px" in t else  0.0
  s.py = t["py"] if "py" in t else  0.0
  if "x" in t
    x=t["x"]
    s.px = (x[0]+x[1])/2
    s.wx = x[1]-s.px
  end
  if "y" in t
    y=t["y"]
    s.py = (y[0]+y[1])/2
    s.wy = y[1]-s.py
  end
  c.clear(1,1,1)
  c.mix(0)
  grid(c,1)
  labels(c,s.wx,s.wy,s.px,s.py)
  c.flush()
  return s
end

function sigmoid(x)
  tanh(0.2*x)
end

function cplot(f,t={})
  {wx=10.0, wy=10.0, px=0.0, py=0.0}=t
  a = gw//4; b = gh//4
  a2 = gw/8; b2 = gh/8
  c = gx.new(gw,gh,1)
  c.font(16)
  c.clear(1,1,1)
  c.mix(0)
  for x in a
    for y in b
      z = ((x-a2)/a2*wx+px)+(py-(y-b2)/a2*wy)*1i
      w = f(z)
      c.HSL(arg(w),1,sigmoid(abs(w)))
      c.fill(4*x,4*y,4,4)
    end
  end
  c.cset(0.7,0.7,0.64,0.2)
  vline(c,gw2)
  hline(c,gh2)
  labels(c,wx,wy,px,py)
  c.flush()
  while c.key()!="q"
    time.sleep(0.2)
  end
end

function contour_plot(f,t={})
  {wx=10.0, wy=10.0, wz=1.0, px=0.0, py=0.0}=t
  a = gw//4; b = gh//4
  a2 = gw/8; b2 = gh/8
  c = gx.new(gw,gh,1)
  c.font(16)
  c.clear(1,1,1)
  c.mix(0)
  for x in a
    for y in b
      ax = ((x-a2)/a2*wx+px)
      ay = (py-(y-b2)/a2*wy)
      w = wz*f(ax,ay)
      c.HSL(0.8,1,sigmoid(abs(w)))
      c.fill(4*x,4*y,4,4)
    end
  end
  c.cset(0.7,0.7,0.64,0.2)
  vline(c,gw2)
  hline(c,gh2)
  labels(c,wx,wy,px,py)
  c.flush()
  while c.key()!="q"
    time.sleep(0.2)
  end
end

function get_color_new(c1,c2)
  r1,g1,b1 = c1
  r2,g2,b2 = c2
  return fn|x|
    x = x%2.0
    x = 2-x if x>1 else x
    r = (r2-r1)*x+r1
    g = (g2-g1)*x+g1
    b = (b2-b1)*x+b1
    return r,g,b
  end
end

function fractal(f,g)
  W=1024; H=640
  canvas = gx.new(W,H,1)
  canvas.font(20)
  get_color = get_color_new(
    [0.0,0.0,0.1], [1.0,1.0,0.4]
  )
  px=0; py=0; m=1
  label new
  pw=8; w = W//pw; h = H//pw
  while true
    for y in h
      for x in w
        c = ((4*x/h-3)*m-px)-((4*y/h-2)*m-py)*1i
        z = g(c)
        canvas.cset(0,0,0)
        canvas.fill(pw*x,pw*y,pw,pw)
        for i in 100
          z = f(z,c)
          if abs(z)>2
            color = get_color(i/10)
            canvas.cset(color[0],color[1],color[2])
            canvas.fill(pw*x,pw*y,pw,pw)
            break
          end
        end
      end
      canvas.cset(0.8,0,0.4)
      canvas.pos(10,10)
      canvas.print(str(py*1i-px))
      canvas.print("m = "+str(m))
      canvas.flush()
      key = canvas.key()
      if not key is null
        label choose
        if key=="q"
          goto out
        elif key=="left"
          px+=m/2; goto new
        elif key=="right"
          px-=m/2; goto new
        elif key=="up"
          py+=m/2; goto new
        elif key=="down"
          py-=m/2; goto new
        elif key=="+"
          m=m/2; goto new
        elif key=="-"
          m=m*2; goto new
        end
      end of if
    end of for
    pw//=2; w*=2; h*=2
    if pw==0
      break
    end
  end of while
  while true
    key = canvas.key()
    if key=="q"
      break
    elif not key is null
      goto choose
    end
    time.sleep(0.1)
  end
  label out
end


