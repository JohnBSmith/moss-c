
# factorial
sub fac(n)
  return (1..n).prod()
end

# raising factorial
sub rf(x,n)
  n.prod(|k| x+k)
end

# falling factorial
sub ff(x,n)
  n.prod(|k| x-k)
end

# binomial coefficient
sub bc(n,k)
  if k<0 or k>n
    return 0
  elif k==0 or k==n
    return 1
  else
    k=min(k,n-k)
    y=1
    for i in k
      y = y*(n-i)//(i+1)
    end
    return y
  end
end

# multinomial coefficient
sub mc(k)
  return size(k).prod(|i| bc(i.sum(|j| k[j]),k[i]))
end

# finite difference
sub Delta(n,f,x,h)
  return (sub|x| f(x+h)-f(x) end^n)(x)
end

sub partition(n,k)
  if n<k
    return 0
  elif k==1 or n==k
    return 1
  else
    m = partition.m
    t = [n,k]
    if t in m
      return m[t]
    else
      m[t]=partition(n-1,k-1)+partition(n-k,k)
      return m[t]
    end
  end
end
partition.m={}

# partition function
sub pf(*argv)
  if size(argv)==2
    return partition(argv[0],argv[1])
  else
    n=argv[0]
    return (1..n).sum(|k| partition(n,k))
  end
end

sub s1(n,k)
  if n==0
    return k==0? 1: 0
  elif k==0
    return 0
  else
    t = [n,k]
    m = s1.m
    if t in m
      return m[t]
    else
      m[t]=(n-1)*s1(n-1,k)+s1(n-1,k-1)
      return m[t]
    end
  end
end
s1.m={}

sub s2(n,k)
  if n==0
    return k==0? 1: 0
  elif k==0
    return 0
  else
    t = [n,k]
    m = s2.m
    if t in m
      return m[t]
    else
      m[t] = k*s2(n-1,k)+s2(n-1,k-1)
      return m[t]
    end
  end
end
s2.m={}

# Stirling numbers of the first kind
sub bracket(n,k)
  if n<0 and k<0
    return brace(-k,-n)
  else
    return n<k? 0: s1(n,k)
  end
end

# Stirling numbers of the second kind
sub brace(n,k)
  if n<0 and k<0
    return bracket(-k,-n)
  else
    return n<k? 0: s2(n,k)
  end
end

# Eulerian numbers
sub angle(n,k)
  if n==0
    return k==0? 1: 0
  elif k<0
    return 0
  else
    t=[n,k]
    m=angle.m
    if t in m
      return m[t]
    else
      m[t] = (k+1)*angle(n-1,k)+(n-k)*angle(n-1,k-1)
      return m[t]
    end
  end
end
angle.m={}

# second-order Eulerian numbers
sub aangle(n,k)
  if n==0
    return k==0? 1: 0
  elif k<0
    return 0
  else
    t=[n,k]
    m=aangle.m
    if t in m
      return m[t]
    else
      m[t] = (k+1)*aangle(n-1,k)+(2*n-1-k)*aangle(n-1,k-1)
      return m[t]
    end
  end
end
aangle.m={}

# Bell numbers
sub Bell(n)
  (0..n).sum(|k| brace(n,k))
end

sub permutations(a)
  if size(a)<=1
    return [copy(a)]
  end
  x=a[..0]
  b=[]
  for p in permutations(a[1..])
    for i in 0..size(a)-1
      b.push(p[..i-1]+x+p[i..])
    end
  end
  return b
end

sub comb(m,s)
  if m==0
    return [s[1..0]]
  elif size(s)==0
    return []
  else
    return(comb(m-1,s[1..]).map(|a| s[..0]+a)
      +comb(m,s[1..]))
  end
end

sub combinations(m,s)
  T = type(s)
  if T is dict.type
    return comb(m,list(s)).map(set)
  elif T is str.type
    return comb(m,s)
  else
    return comb(m,list(s))
  end
end

sub part(n,k,max)
  if n==0
    return [[]]
  elif n>k*max
    return []
  elif n==k*max
    return [[max]*k]
  elif k==1
    return [[n]]
  else
    a=[]
    for x in 1..min(max,n-1)
      for t in part(n-x,k-1,x)
        a.push(t+[x])
      end
    end
    return a
  end
end

sub partitions(n,k)
  part(n,k,n)
end

