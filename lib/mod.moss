
function mod(m)
  return fn|a|
    table Mod{a=a%m, m=m}
  end
end

Mod = table{
  function string
    [self.a," mod ",self.m].join()
  end,
  function add(b)
    if type(b) is Mod
      return table Mod{
        a=(self.a+b.a)%self.m,
        m=self.m
      }
    else
      return table Mod{
        a=(self.a+b)%self.m,
        m=self.m
      }
    end
  end,
  function sub(b)
    table Mod{
      a=(self.a-b.a)%self.m,
      m=self.m
    }
  end,
  function mul(b)
    table Mod{
      a=(self.a*b.a)%self.m,
      m=self.m
    }
  end,
  function RMPY(b)
    table Mod{
      a=(self*b.a)%b.m,
      m=b.m
    }
  end,
  function POW(n)
    if type(n) is Mod
      return table Mod{
        a=pow(self.a,n.a,self.m),
        m=self.m
      }
    else
      return table Mod{
        a=pow(self.a,n,self.m),
        m=self.m
      }
    end
  end,
  function rpow(n)
    table Mod{
      a=pow(self,n.a,n.m),
      m=n.m
    }
  end,
  function sqrt
    m=self.m; a=self.a
    (0..m-1).filter(fn|x|
      x=x%m
      return x*x%m==a
    end).list()
  end,
  function preimage(f)
    m=self.m; a=self
    (0..m-1).filter(fn|x|
      x = table Mod{a=x%m, m=m}
      return f(x).a==a.a
    end).list()
  end
}








