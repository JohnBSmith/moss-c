<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Applications</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js" type="text/javascript">
  </script>
</head>
<body>

<h1>Applications</h1>

<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#Regression">Linear regression</a>
<li><a href="#FRNG">Random numbers</a>
<li><a href="#plot">Function grapher</a>
</ol>

<h2 id="Regression">Linear regression</h2>
<p>We want to implement a linear regression quickly.
Outlier tests are leaved aside and on numerical effects no care
is taken.
</p>

<pre class="moss">
use math: sqrt

sub mean(a)
  a.sum()/size(a)
end

sub square_sum(a,m)
  a.sum(|x| (x-m)^2)
end

sub product_sum(a,b,mx,my)
  map(a,b,sub|x,y| (x-mx)*(y-my) end).sum()
end

sub linear_regression(a)
  x,y = unzip(a)
  mx = mean(x)
  my = mean(y)
  sx = square_sum(x,mx)
  sy = square_sum(y,my)
  sxy = product_sum(x,y,mx,my)
  rxy = sxy/sqrt(sx*sy)
  return table
    mx=mx, my=my, r=rxy, c=[mx,my],
    ax=sxy/sx, bx=my-sxy/sx*mx,
    ay=sxy/sy, by=mx-sxy/sy*my
  end
end

sub print_linear_regression(a)
  t = linear_regression(a)
  print("y(x) = ax*x+bx = ax*(x-mx)+my")
  print("ax = ", t.ax)
  print("bx = ", t.bx)
  print("mx = ", t.mx)
  print("my = ", t.my)
  print("rxy = ", t.r)
  print("R^2 = " t.r^2)
end
</pre>

<p>Mathematical question: one can replace <code>product_sum(x,y,mx,my)</code>
with <code>product_sum(x,y,r,my)</code> or <code>product_sum(x,y,mx,r)</code> where <code>r</code>
is an arbitrary real number. Why is this possible?
</p>

<h2 id="FRNG">
Random numbers</h2>

<p>We want to generate random numbers that are distributed
according to a certain distribution function.
</p>

<pre class="moss">
use math: erf, sqrt
use na: inv

# F: a cumulative distribution function
random = sub|F| r=rand()
  return || inv(F,r(),-1000,1000)
end

# Cumulative standard normal distribution
norm = |x| 1/2*erf(x/sqrt(2))+1/2

# Obtain a cumulative distribution function
# from a list of random numbers.
cdf = |a| |x| a.count(|X| X&lt;=x)/size(a)

# Example
a = random(norm).list(100)
F = cdf(a)
</pre>

<h2 id="plot">
Function grapher</h2>

<p>Simple plots.
</p>
<pre class="moss">
use plotlib: plot
plot(|x| x^2)
</pre>

<p>Parametric curves.
</p>
<pre class="moss">
use plotlib: system
use math: sin, cos

s = system()
s.plot(|x| x^2)
s.vplot(|t| [cos(t),sin(t)])
s.idle()
</pre>

<p>Advanced.</p>
<pre class="moss">
use plotlib: system
use math: pi, sin, cos, tan

s = system({wx=5,wy=5})
s.plot(tan,{
  n=10000,
  color=[0.4,0,0.4]
})

v = |t| [cos(t), sin(t)]
s.vplot(v,{
  t1=0, t2=pi
})

s.scatter([
  [1,1], [-1,1], [-1,-1], [1,-1]
],{
  color=[0,0,0.4]
})

s.idle()
</pre>
<p>Complex functions.</p>
<pre class="moss">
use plotlib: plot, cplot
use cmath: re, im, exp

cplot(|z| exp(z))

a = [|x| re(exp(x*1i)), |x| im(exp(x*1i))]
plot(a)
</pre>

<p>Complex fractals.</p>
<pre class="moss">
use plotlib: fractal
use cmath: re, im

# Mandelbrot set
fractal(|z,c| z^2+c, |c| 0)

# Burning ship fractal
fractal(|z,c| (abs(re(z))-abs(im(z))*1i)^2+c, |c| 0)

# Julia set of f(z)=z^2-1
fractal(|z,c| z^2-1, |c| c)
</pre>

<p>Interlacing and random interlacing.</p>
<pre class="moss">
use plotlib: system

# Bifurcation diagramm
w = rand()
f = |r| (sub|x| r*x*(1-x) end^200)(w())

s = system({px=3, wx=1.25, wy=2})
# s.interlace(f)
s.random(f)
</pre>

</body>
</html>

