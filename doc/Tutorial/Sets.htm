<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Set theory</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js">
  </script>
</head>
<body>

<h1>Set theory</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#construction">Construction</a>
<li><a href="#operations">Basic operations</a>
<li><a href="#products">Cartesian products</a>
<li><a href="#powersets">Power sets</a>
<li><a href="#equivalence">Equivalence classes</a>
<li><a href="#functions">Sets of functions</a>
</ol>
</div>

<p>In mathematics, the concept of sets is very useful and was
worked out as a foundational system to formalize and abstract
mathematics further. Sets together with the strongly related
concepts <em>tuple, function, equivalence class</em> are some of the
most general, and as such they have many hidden occurences, also in
things of daily interest.
</p>

<p>Not all of the constructions in mathematics can be computed,
as they involve infinite or very large sets. Nevertheless is seems
beneficial to have sets as a datastructure, also due to didactic
reasons.
</p>

<h2 id="construction">
Construction</h2>

<p>In Moss sets are noted down like in standard math notation.
The function <code>set</code> converts an iterable object
into a set.
</p>

<pre class="moss">
&gt; A = {1,2,3,4}
&gt; B = set(1..10)

# print the set A
# but note: the elements can be in any order
&gt; print(A)
{1, 2, 3, 4}

# print the set A prettier
&gt; print(list(A).sort())
[1, 2, 3, 4]

# the set of the first four even numbers
&gt; set((1..).filter(|x| x%2==0).list(4))
{2, 4, 6, 8}
</pre>

<h2 id="operations">
Basic operations</h2>

<pre class="moss">
&gt; A = {1,2,3,4}
&gt; B = {3,4,5,6}

# union
&gt; A|B
{1, 2, 3, 4, 5, 6}

# intersection
&gt; A&amp;B
{3, 4}

# difference set
&gt; A-B
{1, 2}
&gt; B-A
{5, 6}

# symmetric difference
&gt; A$B
{1, 2, 5, 6}

# cardinality
&gt; size(A)
4

# disjoint?
&gt; A&amp;B=={}
false
&gt; not A.any(|x| x in B)
false

# membership
&gt; [2 in A, 2 not in A]
[true, false]

# comparison
&gt; [A==B, A!=B, A&lt;B, A&lt;=B]
[false, true, false, false]

# universal quantifier
&gt; A.all(|x| x%2==0)
false

# existential quantifier
&gt; A.any(|x| x%2==0)
true

# counting quantifier
&gt; A.count(|x| x%2==0)
2

# set builder notation
&gt; set(A.filter(|x| x%2==0))
{2, 4}

# image of a function
&gt; set(A.map(|x| 2*x))
{2, 4, 6, 8}

# operations on a collection of sets
cup = |a| a.reduce({},|x,y| x|y)
cap = |a| a.reduce({},|x,y| x&amp;y)

&gt; cup([A,B])
{1, 2, 3, 4, 5, 6}

&gt; cup((1..100).map(|x| {x^2%7,x^3%7}))
{0, 1, 2, 4, 6}
</pre>


<h2 id="products">
Cartesian products</h2>

<p>Cartesian products are stated in the most simple manner.
</p>

<pre class="moss">
&gt; A = [0,1]
&gt; B = [2,3]
&gt; A*B
[[0, 2], [0, 3], [1, 2], [1, 3]]
&gt; A^2
[[0, 0], [0, 1], [1, 0], [1, 1]]
</pre>

<p>Currently there is no associative product,
but it can be done in the follwing way.
</p>

<pre class="moss">
prod = |*a| a.reduce(|x,y| (x*y).map(|t| t.chain()))
</pre>
<p>We will extend the functionality of the dictionary data type.
</p>
<pre class="moss">
extend(dict.type,table
  sub MPY(b)
    set(list(self)*list(b))
  end,
  sub POW(n)
    set(list(self)^n)
  end
end)

&gt; A = {0,1}
&gt; B = {2,3}
&gt; A*B
{[0, 2], [0, 3], [1, 2], [1, 3]}
&gt; A^2
{[0, 0], [0, 1], [1, 0], [1, 1]}
</pre>


<h2 id="powersets">
Power sets</h2>

<p>There is no built-in function for this purpose, but we
can write one.
</p>

<pre class="moss">
powerset = |a| a.reduce([[]],|p,x| p+p.map(|s| s+[x]))

&gt; powerset(1..4)
[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4],
[2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]
</pre>

<p>We will extend the functionality of the dictionary data type.
</p>
<pre class="moss">
extend(dict.type,table
  sub RPOW(a)
    if self==2
      return a.reduce({{}},|p,x| p|set(p.map(|s| s|{x})))
    end
  end
end)

&gt; 2^{1,2}
{{}, {1}, {2}, {1,2}}
</pre>


<h2 id="equivalence">
Equivalence classes</h2>

<p>Division of a list by an equivalence relation <code>R</code> has
the list of equivalence classes as a result.
</p>

<pre class="moss">
&gt; R = |x,y| x%4==y%4
&gt; list(0..9)/R
[[0, 4, 8], [1, 5, 9], [2, 6], [3, 7]]
</pre>

<p>In reverse, a equivalence relation can be constituted from
a list of equivalence classes (quotient set) <code>Q</code>.
</p>

<pre class="moss">
eq = sub|Q|
  d = Q.map(sub|c|
    c.map(sub|x| [x,c[0]] end)
  end).chain().dict()
  return |x,y| d[x]==d[y]
end

Q = [[0,2],[1,3]]
R = eq(Q)
</pre>

<p>If the equivalence relation is specified by a
projection function <code>p</code>, so that

<pre class="moss">
  R = |x,y| p(x)==p(y)
</pre>

<p>the list of equivalence classes should be computed
in the following faster way.
</p>

<pre class="moss">
partition = sub|a,p|
  d={}
  for x in a
    y = p(x)
    if y in d
      d[y].push(x)
    else
      d[y]=[x]
    end
  end
  return d.values()
end
</pre>

<h2 id="functions">Sets of functions</h2>

<p>The set of all functions from a domain to a codomain.
A function will be represented as a dictionary.
</p>
<pre class="moss">
extend(dict.type,table
  sub POW(n)
    if type(n) is int.type
      return set(list(self)^n)
    else
      a = list(n)
      c = list(self)^size(a)
      return set(c.map(|t| (0..size(t)-1).dict(|i| [a[i],t[i]])))
    end
  end
end)

&gt; {"a","b","c"}^{0,1}
{{0: "a", 1: "a"},
 {0: "a", 1: "b"},
 {0: "a", 1: "c"},
 {0: "b", 1: "a"},
 {0: "b", 1: "b"},
 {0: "b", 1: "c"},
 {0: "c", 1: "a"},
 {0: "c", 1: "b"},
 {0: "c", 1: "c"}}
</pre>

</body>
</html>


