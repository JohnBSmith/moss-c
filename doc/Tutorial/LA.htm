<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Linear algebra</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js" type="text/javascript">
  </script>
</head>
<body>

<h1>Linear algebra</h1>

<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#Basic">Basic approach</a>
</ol>

<h2 id="Basic">Basic approach</h2>

<p>The Moss programming language incorporates the neccessary
features (operator overloading, multiindex array slices,
slice assignments), to state formulas from linear algebra in a
nicely looking form.
</p>

<p>Usually one wishes to calculate with lists like with vectors
from the coordinate space, but that is not directly possible,
because addition of lists means concatenation. Furthermore, in
the grand scheme of things such an approach would be inefficient,
because multidimensional arrays would be implemented as lists of
lists. It is more memory efficient to store a
multidimensional array as a strided array.
</p>

<p>What follows is the basic approach for matrices, implemented via
strided arrays in row-major order.
</p>
<pre class="moss">
sub matrix(*a)
  return table[matrix.type]
    m = size(a),
    n = size(a[0]),
    a=a.chain()
  end
end

matrix.type = table
  str = begin
    return "matrix("+self.a.join(",\s")+")"
  end,
  sub get(i,j)
    return self.a[i*self.n+j]
  end
end

# a[i*n+j]: row-major indexing (possible)
# a[i+j*m]: column-major indexing (impossible)
# a[0..n-1]: first row-major stride (row vector a[0,..])
# a[i*n..i*n+n-1]: row-major stride i (row vector a[i,..])
</pre>

<p>Now we can do pretty indexing.
</p>
<pre class="moss">
a = matrix(
  [1,2],
  [3,4]
)
print(a[0,0], ", ", a[0,1])
print(a[1,0], ", ", a[1,1])
</pre>
<p>It is very simple to implement scalar multiplication and
vector addition.
</p>
<pre class="moss">
matrix.type = table
  # ...,
  sub mpy(r)
    return table[vector.type]
      m=self.m, n=self.n,
      a=self.a.map(|x| r*x)
    end
  end,
  sub neg
    return table[vector.type]
      m=self.m, n=self.n,
      a=self.a.map(|x| -x)
    end
  end,
  sub add(w)
    return table[vector.type]
      m=self.m, n=self.n,
      a=map(self.a,w.a,|x,y| x+y)
    end
  end,
  sub sbt(w)
    return table[vector.type]
      m=self.m, n=self.n,
      a=map(self.a,w.a,|x,y| x-y)
    end
  end
end
</pre>
<p>Note that this matrix data type is type generic:
the elements can be real numbers, complex numbers or long integers.
Even matrices (each of a different signature) as elements of a matrix
are possible. Such a structure is known as a block matrix.
</p>

</body>
</html>

