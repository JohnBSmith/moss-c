<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Basics</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js">
  </script>
</head>
<body>

<h1>Basics</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#calc">Moss as a calculator</a>
<li><a href="#types">Basic data types</a>
<li><a href="#functions">Functions</a>
<li><a href="#strings">Strings</a>
<li><a href="#lists">Lists</a>
<li><a href="#dictionarys">Dictionarys</a>
<li><a href="#interpreter">How to use the interpreter</a>
<li><a href="#comments">Comments</a>
<li><a href="#cf">Control flow</a>
<li><a href="#operators">Operators</a>
<li><a href="#import">Importing additional functionality</a>
</ol>
</div>


<h2 id="calc">Moss as a calculator</h2>

<p>The first thing one can basically do is to use Moss as a
calculator. Just type in some mathematical expression and then
press the return-key.
</p>

<pre class="moss">
&gt; 1+2
3
</pre>

<p>There is no invisible times, the multiplication
operator <code>"*"</code> has always to be stated explicitly, wich is
a good thing. This allows us to have multiple letter identifiers and
an invisible function application operator.
These concepts will be explained later.
The division operator is the slash <code>"/"</code>.</p>

<p>Only round brackets can be used to undermine the order of
operations. Square brackets and curly brackets have another purpose.
The expression "10 to the power of two" is written
<code>"10^2"</code>.
</p>

<pre class="moss">
&gt; (2+4)*(4-2)
12

&gt; 10^2
100
</pre>

<p>For integer division, use the the operator <code>"//"</code>
instead of <code>"/"</code>. The remainder of the division is
calculated by the modulo operator <code>"%"</code>.</p>

<pre class="moss">
&gt; 14/5
2.8

&gt; 14//5
2

&gt; 14%5
4
</pre>

<p>It is possible to store the value of an expression in a variable.
The statement <code>"a=12"</code> means that the value 12 is assigned
to the variable <code>a</code>. If <code>a</code> afterwards occurs
itself in an expression, it has this value. So the variable contains
this value until some other value is assigned to it.
</p>

<pre class="moss">
&gt; a=12
&gt; 2*a
24
&gt; a=10*a
&gt; 4*a
480
</pre>

<p>A variable is represented via an identifier, in this case
<code>"a"</code>. An identifer can consist of more than one letter.
Some or all of the letters can be capital letters, but
<code>Omega</code> is different from <code>omega</code>. That means,
in Moss identifiers are <i>case sensitive</i>.
</p>

<p>We can test, whether two numbers are equal or not. The expression
"a is equal to b" is written <code>a==b</code>.
</p>
<pre class="moss">
&gt; a=360
&gt; [a==360, a==240, a!=360, a!=240]
[true, false, false, true]
</pre>

<p>And we can compare two numbers with respect to their order.
</p>
<pre class="moss">
&gt; [1&lt;2, 1&gt;2, 1&lt;=2, 1&gt;=2]
[true, false, true, false]
</pre>

<p>To get the minimum and maximum of two numbers,
use the functions <code>min(x,y)</code> and <code>max(x,y)</code>.
</p>

<p>Calculations with complex numbers are possible.
</p>

<pre class="moss">
&gt; (4+2i)*(2+1i)
6+8i
</pre>

<p>Moss can calculate really big numbers.
</p>

<pre class="moss">
&gt; 2^10
1024

&gt; 2^1000
1071508607186267320948425049060001810561404811705533607443750388370351
0511249361224931983788156958581275946729175531468251871452856923140435
9845775746985748039345677748242309854210746050623711418779541821530464
7498358194126739876755916554394607706291457119647768654216766042983165
2624386837205668069376
</pre>

<p>You can skip the rest of this section.</p>

<p>The most significant digits (MSDs) are
checked easily under the use of power and logarithm laws. We find
</p>

<pre>
  2^1000 = (10^lg(2))^1000 = 10^(lg(2)*1000)
  &approx; 10^301.0299957 = 10^301*10^0.0299957.
</pre>

<p>Now consider only the fractional part of the exponent, we get
</p>
<pre>
  10^0.0299957 = 1.0715087.
</pre>

<p>We can also check the exact number of digits easily. The
function "round down" (called floor) is needed to state the formula
precisely. One has
</p>

<pre>
  number_of_digits(x) = floor(lg(x)/lg(b)+1).
</pre>

<p>The base is simply <code>b=10</code>,
so the formula simplifies to
</p>
<pre>
  number_of_digits(x) = floor(lg(x)+1).
</pre>

<p>With this in our tool chest we have
</p>
<pre>
  floor(lg(2^1000)+1) = floor(1000*lg(2)+1)
  = floor(302.03) = 302.
</pre>

<p>Therefore the number <code>2^1000</code> has <code>302</code>
digits in decimal representation.
</p>

<p>You can check the least significant digits (LSDs) if you learned
about modular arithmetic. The LSDs of <code>x^n</code> are the result
of the formula <code>(x^n)%m</code> where <code>m</code> is a power
of ten. A faster method to achive this is implemented in the function
<code>pow(x,n,m)</code>.
</p>

<pre class="moss">
&gt; (2^1000)%10000
9376
&gt; pow(2,1000,10000)
9376
</pre>

<p>The digit sum of <code>2^1000</code> can be computed
in the following way.</p>

<pre class="moss">
&gt; str(2^1000).list().map(int).sum()
&gt; 1366
</pre>

<h2 id="types">Basic data types</h2>

<table class="bt">
<tr>
  <th>Typename
  <th>Example data
  <th>Meaning
<tr>
  <td>bool
  <td><code>false, true</code>
  <td>logical values
<tr>
  <td>int
  <td><code>0, 1, 2, -1</code>
  <td>integer numbers
<tr>
  <td>float
  <td><code>0.0, 4.2, 1/3</code>
  <td>floating point numbers
<tr>
  <td>complex
  <td><code>1i, 2+4i, -3.2i</code>
  <td>complex numbers
<tr>
  <td>str
  <td><code>"", "ab"</code>
  <td>strings of characters
<tr>
  <td>bstr
  <td><code>b{}, b{4142}</code>
  <td>strings of bytes
<tr>
  <td>list
  <td><code>[], [1,2]</code>
  <td>lists of elements
<tr>
  <td>dict
  <td><code>{}, {a=1, b=2}</code>
  <td>dictionarys of key-value pairs
<tr>
  <td>range
  <td><code>1..10, (1..)</code>
  <td>ranges of elements
<tr>
  <td>function
  <td><code>|x| 2*x</code>
  <td>functions, subprograms
<tr>
  <td>ast
  <td><code>q{2*x}</code>
  <td>symbolic expressions
</table>

<h2 id="functions">Functions</h2>

<p>Think of the expressions <code>4+2*1, 4+2*2, 4+2*3, 4+2*4</code>.
We want to abstract the pattern <code>4+2*x</code>
from these expressions. To achive this, we create a <i>function</i>
and store it in the variable <code>f</code>.
</p>

<pre class="moss">
&gt; f = sub|x| 4+2*x end
</pre>

<p>This is a function wich takes the value of the variable
<code>x</code> as its input and returns the value of <code>4+2*x</code>
as output. The <code>x</code> is a variable,
but it is bound to the function because it appears between
the vertical bars. Because of this the variable <code>x</code>
is called <em>formal argument</em> of the function.
</p>

<p>Now, if <code>a</code> is some
number, we can write <code>f(a)</code> to calculate the value
of <code>4+2*a</code>. The number <code>a</code> is called <em>actual
argument</em> of the function. This makes us able to compute the
values without typing in the same pattern again and again.
Think of much longer patterns.
</p>

<pre class="moss">
&gt; [f(1),f(2),f(3),f(4)]
[6, 8, 10, 12]
</pre>

<p>It is possible to abstract this further.</p>

<pre class="moss">
&gt; [1,2,3,4].map(f)
[6, 8, 10, 12]

&gt; list(1..4).map(f)
[6, 8, 10, 12]
</pre>

<p>A function may have more than one argument. We will state a
function that has two arguments. There is more than one way to
achieve this. The first one uses two formal arguments.
Formal arguments appear between the vertical bars and
are separated there by commata.
</p>

<pre class="moss">
&gt; g = sub|x,y| x*y end
&gt; g(3,4)
12
</pre>

<p>The next way is a technique known as currying.
</p>

<pre class="moss">
&gt; g = sub|x| sub|y| x*y end end
&gt; g(3)(4)
12
</pre>

<p>The next way is to have a list as an argument instead.
</p>

<pre class="moss">
&gt; g = sub|x| x[0]*x[1] end
&gt; g([3,4])
12
</pre>

<p>If the body of a function consists only of a single expression,
the keywords "<code>sub</code>" and "<code>end</code>" may be omitted.
</p>

<pre class="moss">
# long form
&gt; f = sub|x| 2*x end

# short form
&gt; f = |x| 2*x
</pre>


<h2 id="strings">Strings</h2>

<p>In Moss all kinds of objects can be stored in variables.
A string of characters is also an object. The function
<code>print</code> writes an object to the output.
</p>

<pre>
<span class="moss">&gt; s = "London"
&gt; s
"London"
&gt; print(s)
</span>London
</pre>

<p>The function <code>str</code> transforms an integer into a string.
The function <code>int</code> does the reverse.
</p>

<pre class="moss">
&gt; str(360)
"360"
&gt; int("360")
360
</pre>
<p>Called on a string, <code>str</code> does not change anything.
To <code>int</code> applies the same.
</p>
<pre class="moss">
&gt; str("Flower")
"Flower"
&gt; int(12)
12
</pre>

<p>Two strings can be added, this will glue both strings together.
Therefore addition of strings is associative.
</p>

<pre class="moss">
&gt; s = "Night"
&gt; s+"fall"
"Nightfall"
</pre>

<p>The empty string <code>""</code> is to strings like the number zero
is to numbers.
</p>

<pre class="moss">
&gt; "Elm tree"+""
"Elm tree"
</pre>

<p>We can test, whether two strings are equal or not.
</p>

<pre class="moss">
&gt; s = "Mouse"
&gt; [s=="Mouse", s=="Mice", s!="Mouse", s!="Mice"}
[true, false, false, true]
</pre>

<p>The function <code>size</code> takes a string and returns
the number of characters.</p>

<pre class="moss">
&gt; size("Bee")
3
&gt; size("")
0
</pre>

<p>The result of the expression <code>s[i]</code> is the character at
index <code>i</code>. Furthermore the result of the expression
<code>s[i..j]</code> is the substring <code>
s[i]+s[i+1]+...+s[j-1]+s[j]</code>.
</p>

<pre class="moss">
&gt; s = "Elm tree"
&gt; [s[0], s[2], s[-4], s[-1]]
["E", "m", "t", "e"]

&gt; s[0..2]
"Elm"
&gt; s[..2]
"Elm"

&gt; s[4..]
"tree"
&gt; s[-2..]
"ee"
&gt; s[4..-3]
"tr"
</pre>

<p>Note that <code>s[i..-1]</code> is a special case:
an empty slice for every index <code>i</code>. You can bypass this
behavior by writing <code>s[i..]</code> or
<code>s[i..size(s)-1]</code>.
</p>

<p>There are some escape sequences that provide the notation of
arbitrary Unicode characters inside of a string literal.
</p>

<table class="bt">
<tr><th>Sequence</th><th>Meaning</th>
<tr><td><code>\n</code><td>new line
<tr><td><code>\s</code><td>space
<tr><td><code>\t</code><td>tabulator
<tr><td><code>\b</code><td>backslash
<tr><td><code>\d</code><td>double quote
<tr><td><code>\q</code><td>single quote
<tr><td><code>\xhh</code><td>character with Unicode value <code>0xhh</code>
<tr><td><code>\uhhhh</code><td>character with Unicode value <code>0xhhhh</code>
</table>

<p>The number <code>0xhh</code> is a hexadecimal number consisting of two
hexadecimal digits, a number in the range <code>0x00..0xff</code>.
An example:
</p>

<pre class="moss">
print("\b\b\b\b\na\s\sb\n\d\q\q\d\n\x41\u0041\u0042")
# Output:
# \\\\
# a  b
# "''"
# AAB
</pre>

<p>A triple quoted string literal can span over more than
one line.</p>

<pre class="moss">
s = """
Multi
line
string
"""
</pre>

<p>If space is placed directly behind a backslash, this space is
overlooked until some non spacing character is found.
</p>

<pre class="moss">
print("a\    b")
# output:
# ab

s = """\
Multi\s\
line\s\
string\
"""
print(s)
# output:
# Multi line string
</pre>

<h2 id="lists">Lists</h2>

<p>In Moss lists are dynamic arrays (not doubly linked lists). This
is a fundamental, albeit easy to understand, data structure.
</p>

<pre class="moss">
# Construction of a list with elements 4,9,2,6.
&gt; [4,9,2,6]
[4, 9, 2, 6]

# A list can be empty.
&gt; []
[]

# We can assign a list to a variable.
&gt; a = [1,2,3,4]
&gt; a
[1, 2, 3, 4]

# Every element of a list can be of a different type.
# A list can contain lists as elements.
&gt; ["abc",12,[1,2]]
["abc", 12, [1, 2]]
</pre>

<p>The expression <code>list(a..b)</code> constructs a list of
integers from <code>a</code> to <code>b</code>.
</p>
<pre class="moss">
&gt; list(1..10)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</pre>
<p>We can transform a string into a list of characters. The inverse
transform is also possible.
</p>
<pre class="moss">
&gt; list("abc")
["a", "b", "c"]

&gt; ["a","b","c"].join()
"abc"
</pre>

<p>A list can be used as a dynamic stack.</p>

<pre class="moss">
&gt; a=[]
&gt; a.push(2)
&gt; a.push(3)
&gt; a
[2, 3]
&gt; a.pop()
3
&gt; a
[2]
</pre>

<p>Lists can be added. The result is a concatenation.
</p>
<pre class="moss">
&gt; [1,2]+[3,4]
[1, 2, 3, 4]

&gt; [1,2]+[]
[1, 2]
</pre>
<p>Lists are indexed like strings. The function <code>"size"</code>
takes a list and returns the number of its elements.
</p>
<pre class="moss">
&gt; a = [4,5,6,7,8]
&gt; size(a)
5
&gt; [a[0], a[1], a[-1], a[-2]]
[4, 5, 8, 7]
&gt; a[2..3]
[6, 7]
</pre>


<h2 id="dictionarys">Dictionarys</h2>

<p>A dictionary can be seen as a generalisation of a list. Like in a
list an element of a dictionary belongs to an index, called <em>key</em>.
But such a key is not restricted to integers.
</p>

<pre class="moss">
&gt; d = {}
# empty dictionary

&gt; d = {0: "a", 1: "b", "alpha": "c"}
&gt; d[0]
"a"
&gt; d["alpha"]
"c"
</pre>

<p>The operator <code>"in"</code> is used to test whether a key
is contained in a dictionary or not.
</p>

<pre class="moss">
&gt; [0 in d, "alpha" in d, "beta" in d]
[true, true, false]

&gt; [0 not in d, "alpha" not in d, "beta" not in d]
[false, false, true]
</pre>

<p>The function call <code>list(d)</code> returns the list
of keys contained in <code>d</code>.
The keys can be in any order, because a dictionary
is not (explicitly) ordered.
</p>

<pre class="moss">
&gt; list(d)
[0, 1, "alpha"]
</pre>

<p>If you are interested in the values or key-value pairs, simply
express this by methods.
</p>

<pre class="moss">
&gt; list(d.values())
["a", "b", "c"]

&gt; list(d.items())
[[0, "a"], [1, "b"], ["alpha", "c"]]
</pre>

<p>If the key is an identifier, there is a short notation.
Instead of
</p>
<pre class="moss">
  {"x": 4, "y": 3}
</pre>
<p>one may write:
</p>
<pre class="moss">
  {x=4,y=3}
</pre>
<p>But note that this is not the same as <code>{x:4,y:3}.</code>
Before a colon, <code>x,y</code> are itself variables that should contain keys.
</p>
<pre class="moss">
&gt; x="u"; y="v"
&gt; {x:4,y:3} == {u=4,v=3}
true
</pre>
<p>If the value of some key is omitted, <code>null</code> is
taken as value.
A dictionary with all values omitted can be used as a set.
All set operations are supported (e.g. union, intersection,
subset relation, universal quantifier).
</p>
<pre class="moss">
&gt; {1,2} == {1:null, 2:null}
true
&gt; A = {1,2,3}
&gt; B = {2,3,4}
&gt; [A|B, A&amp;B, A-B, A$B]
[{1, 2, 3, 4}, {2, 3}, {1}, {1, 4}]
# union, intersection, difference, symmetric difference
</pre>
<p>One can use <code>set(a)</code> to convert an iterable
object <code>a</code> into a set. A set is itself iterable.
For any iterable object things like <code>map</code>
and universal quantifier <code>all</code> are defined.
</p>
<pre class="moss">
&gt; set(1..4)
{1, 2, 3, 4}
&gt; set((1..4).map(|x| 2*x))
{2, 4, 6, 8}
&gt; {2,4,6,8}.all(|x| x%2==0)
true
</pre>

<h2 id="interpreter">How to use the interpreter</h2>

<pre>
moss
  Run the interpreter in command-line mode.

moss alpha
  Execute source file "alpha".

moss -i alpha
  Execute source file "alpha" and then run in command-line mode.

moss -i alpha -i beta
  Execute source file "alpha", then "beta" and then run in
  command-line mode.

moss -net alpha
  Enable network access and execute file "alpha".

moss -unsafe alpha
  Enable unsafe mode and execute file "alpha". This mode enables
  network mode too. Never do this, it enables the interpreter to
  write, overwrite and remove files and thus taking damage to your
  operating system user account.
</pre>

<p>The file name extension of a Moss source code file is
"<code>.moss</code>".
</p>

<h2 id="comments">Comments</h2>

<pre class="moss">
# Single line comment

/*
Multi
line
comment
*/

/*
s = "Phantom text"
print(s)
#*/

/*01*/ stoi = sub|s| /*string to integer*/
/*02*/   s.reduce(0,|x,c| 10*x+ord(c)-48)
/*03*/ end
</pre>

<h2 id="cf">Control flow</h2>

<h3 id="loop">Unconditional loop</h3>
<p>Suppose we want to write a program that asks a character from the
user and prints the Unicode-value of this character. And this program
should be repeated endlessly. In a loop, if all statements are
executed, we jump to the beginning of the loop to execute them again.
</p>
<pre class="moss">
while true
  c = input()
  print(ord(c))
end
</pre>
<p>This program is so short that it can be written as an one liner.
</p>
<pre class="moss">
while true do print(ord(input())) end
</pre>
<p>Maybe you already know about the nesting problem.
That is the question to which opening keyword or bracket
a closing "end" or bracket belongs if there are many of them.
Have a look at the programming language Lisp and you will understand.
</p>

<p>A control flow statement can also be written in a
longer form, stating explicitly what shall end.
This is useful if the body of the loop is longer than one page.
</p>
<pre class="moss">
while true
  c = input()
  print(ord(c))
end of while
</pre>

<p>The user might input more than one character.
We can take this into account in the following way.
</p>
<pre class="moss">
while true
  a = list(input())
  print(a.map(ord))
end
</pre>

<h3 id="while">Conditional loop</h3>
<p>A standard task is to print the numbers from one to ten.
</p>
<pre class="moss">
i=1
while i&lt;=10
  print(i)
  i=i+1
end
</pre>
<p>One can write <code>i++</code> or <code>i+=1</code> instead
of <code>i=i+1</code>.
</p>

<h3 id="for">For-loop</h3>
<p>The numbers in a given range are printed better by a for-loop
than by a while-loop.
</p>
<pre class="moss">
for i in 1..10
  print(i)
end
</pre>

<p>By step two.</p>
<pre class="moss">
for i in 1..10:2
  print(i)
end
</pre>

<p>In reverse.</p>
<pre class="moss">
for i in 10..1:-1
  print(i)
end
</pre>

<p>A range of characters.</p>
<pre class="moss">
for i in 'a'..'d'
  print(i)
end
</pre>

<p>A list instead of a range.</p>
<pre class="moss">
for i in [4,2,1,9]
  print(i)
end
</pre>

<p>It is also possible to iterate over the characters of a string.
</p>
<pre class="moss">
for i in "abc"
  print(i)
end
# Output:
# a
# b
# c
</pre>
<p>Dictionarys are iterable.
</p>
<pre class="moss">
for key in {a=1,b=2}
  print(key)
end

for value in {a=1,b=2}.values()
  print(value)
end

for t in {a=1,b=2}.items()
  print(t)
end
# Output:
# ["a", 1]
# ["b", 2]
# or
# ["b", 2]
# ["a", 1]

for key,value in {a=1,b=2}.items()
  print(key,"|",value)
end
# Output:
# a|1
# b|2
# or
# b|2
# a|1
</pre>

<p>One can iterate over cartesian products.
</p>

<pre class="moss">
for i,j in ["a","b"]*[0,1]
  print(i,j)
end
# vs.
for i in ["a","b"]
  for j in [0,1]
    print(i,j)
  end
end
# Output:
# a0
# a1
# b0
# b1
</pre>

<p>The following program produces the 9&times;9 multiplication table.
</p>

<pre class="moss">
for i in 1..9
  for j in 1..9
    put(str(i*j).rjust(3))
  end
  print()
end
# Output:
#  1  2  3  4  5  6  7  8  9
#  2  4  6  8 10 12 14 16 18
#  3  6  9 12 15 18 21 24 27
#  4  8 12 16 20 24 28 32 36
#  5 10 15 20 25 30 35 40 45
#  6 12 18 24 30 36 42 48 54
#  7 14 21 28 35 42 49 56 63
#  8 16 24 32 40 48 56 64 72
#  9 18 27 36 45 54 63 72 81
</pre>

<p>A for-loop can include the index for each element.
Let <code>i</code> be the index, and <code>x</code> the element.
</p>

<pre class="moss">
for i,x in "abc".enum()
  print(i,"|",x)
end
# Output:
# 0|a
# 1|b
# 2|c

a = [1,2,3,4]
for i,x in a.enum()
  for y in a[i+1..]
    print([x,y])
  end
end
# Output:
# [1, 2]
# [1, 3]
# [1, 4]
# [2, 3]
# [2, 4]
# [3, 4]
</pre>

<h3 id="if">Conditional statements</h3>
<p>In a program we often have to make a branch. Depending on a
condition the program has to perform either in one way or in
another.
</p>

<pre class="moss">
x = int(input("A number: "))
if x%2==0
  print("This number is even.")
else
  print("This number is odd.")
end
</pre>

<h3 id="cond">Conditional expressions</h3>
<p>Like conditional statements there are conditional expressions.
They are much the same, but the keyword <code>"then"</code> is obligatory
because in contrast to conditional statements the condition does not
end with a line break. Let us take the factorial function as an example.
</p>
<pre class="moss">
fac = sub|n|
  return if n==0 then 1 else n*fac(n-1) end
end
</pre>
<p>If you are delighted by brevity:
</p>
<pre class="moss">
f = |n| n==0? 1: n*f(n-1)
</pre>

<p>A more complicated example:
</p>
<pre class="moss">
theta = int(input("A temperature: "))
print(if theta&lt;1 then "freezing"
  elif theta&lt;6 then "cold"
  elif theta&lt;17 then "fresh"
  elif theta&lt;24 then "warm"
  else "hot" end)
</pre>


<h3 id="sub">Subprograms</h3>
<p>As our programs are getting bigger, there is the need of using
some piece of functionality multiple times.
</p>

<pre class="moss">
sub count(s,c)
  k=0
  for x in s
    if x==c then k=k+1
    end
  end
  return k
end

while true
  s = input()
  print("Number of left brackets: ", count(s,"(")+count(s,"["))
  print("Number of right brackets: ", count(s,")")+count(s,"]"))
end
</pre>
<p>It is complicated to solve such a task without
subprograms.
</p>

<p>We can give a function a private name. Then the assignment
statement has an alternative syntatic form.
</p>

<pre class="moss">
# (1) A function without a private name,
# called anonymous.
f = sub|x| 2*x end

# (2) The same function, but with private name "f".
f = sub f|x| 2*x end

# (3) Syntactic sugar for statement (2).
# This is an assignment to the variable f,
# but the assignment operation is invisible.
sub f(x) 2*x end
</pre>

<p>So we could have written <code>count = sub|s,c|</code> or
<code>count = sub count|s,c|</code> instead
of <code>sub count(s,c)</code>.
</p>


<h2 id="operators">Operators</h2>

<p>See <a href="../Operators.htm">Operator precedence table</a>.
</p>


<h2 id="import">Importing additional functionality</h2>

<p>See <a href="../Library.htm">Library reference</a>.
</p>

<pre class="moss">
# ordinary import
use math
f = |x| math.sin(math.pi*x)

# qualified import
use math: pi, sin, cos
f = |x| sin(pi*x)

# alias import
use m=math
f = |x| m.sin(m.pi*x)

# qualified alias import
use math: pi, s=sin, c=cos
f = |x| s(pi*x)

# qualify everything
use math:*
f = |x| sin(pi*x)

# show what is contained in math
expose = |m| print(list(record(m)).sort().join(", "))
expose(math)
</pre>

</body>
</html>

