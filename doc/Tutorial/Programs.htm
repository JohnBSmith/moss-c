<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Examples</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js">
  </script>
</head>
<body>

<h1>Example programs</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#Fractals">Fractals</a>
<li><a href="#Turmite">Turmite</a>
<li><a href="#Sudoku">Sudoku solver</a>
<li><a href="#JSON">JSON-Parser</a>
</ol>
</div>

<h2 id="Fractals">Fractals</h2>

<pre class="moss">
use gx, time
use cmath: re, im

function fractal(f,g)
  w=360; h=240
  canvas = gx.new(w,h,2)
  for y in h
    for x in w
      c = (4*x/h-3)-(4*y/h-2)*1i
      z=g(c)
      for i in 30
        z=f(z,c)
        if abs(z)&gt;2
          canvas.cset(i/30,i/30,i/60)
          canvas.pset(x,y)
          break
        end
      end
    end
    canvas.flush()
  end
  while canvas.key()!="q"
    time.sleep(0.1)
  end
end

# Mandelbrot set
fractal(|z,c| z^2+c, |c| 0)

# Burning ship fractal
fractal(|z,c| (abs(re(z))-abs(im(z))*1i)^2+c, |c| 0)

# Julia set of f(z)=z^2-1
fractal(|z,c| z^2-1, |c| c)
</pre>

<h2 id="Turmite">Turmite
</h2>

<pre class="moss">
# Langton's ant

use gx, time

function main
  w=120; h=80
  a = w*h*[0]/w
  d=0; px=w//2; py=h//2
  canvas = gx.new(4*w,4*h,2)
  k=0
  while true
    if a[py][px]==0
      d=(d+1)%4; a[py][px]=1
      canvas.cset(0.6,0.6,0.4)
    else
      d=(d-1)%4; a[py][px]=0
      canvas.cset(0,0,0)
    end
    canvas.fill(4*px,4*py,3,3);
    if k%10==0
      canvas.flush()
      time.sleep(0.1)
      if canvas.key()=="q" then break end
    end
    if   d==0 then px=(px+1)%w
    elif d==1 then py=(py-1)%h
    elif d==2 then px=(px-1)%w
    else py=(py+1)%h
    end
    k+=1
  end
end

main()
</pre>

<h2 id="Sudoku">Sudoku solver
</h2>

<pre class="moss">
# Sudoku solver
# for simple sudokus

function str_to_list(s)
  k=0; a=[]; b=[]
  for c in s
    if c.isdigit()
      k+=1; a.push(int(c))
    elif c=='.'
      k+=1; a.push(0)
    end
    if k==9
      k=0; b.push(a); a=[]
    end
  end
  return b
end

function list_to_str(a)
  a.map(fn|x|
    x.chunks(3).map(fn|y|
      y.map(|d| '.' if d==0 else str(d)).join()
    end).join("|")
  end).chunks(3).map(fn|y|
    y.join("\n")
  end).join("\n---+---+---\n")
end

function row_set(a,i)
  set(a[i].filter(|x| x!=0))
end

function col_set(a,j)
  set(list(0..8).map(|i| a[i][j]).filter(|x| x!=0))
end

function box_set(a,i,j)
  i=(i//3)*3; j=(j//3)*3
  set(list(0..2).map(fn|x|
    list(0..2).map(|y| a[i+x][j+y])
  end).chain().filter(|x| x!=0))
end

function step(a)
  for i in 0..8
    for j in 0..8
      if a[i][j]==0
        M = set(1..9)-(row_set(a,i)|col_set(a,j)|box_set(a,i,j))
        if size(M)==1
          a[i][j]=list(M)[0]
          return true
        end
      end
    end
  end
  return false
end

function solve(a)
  t=true
  while t
    t=step(a)
  end
end

function main(s)
  a = str_to_list(s)
  solve(a)
  print(list_to_str(a))
end

# Backtracking 

function bsolve(a)
  # solve(a)
  for i in 0..8
    for j in 0..8
      if a[i][j]==0
        M = set(1..9)-(row_set(a,i)|col_set(a,j)|box_set(a,i,j))
        s = []
        for x in M
          b = a.map(copy)
          b[i][j] = x
          s.extend(bsolve(b))
        end
        return s
      end
    end
  end
  return [a.map(copy)]
end

function bmain(s)
  a = bsolve(str_to_list(s))
  print("Number of solutions: ", size(a), ".")
  for i in 0..size(a)-1
    print(i+1,".")
    print(list_to_str(a[i]))
  end
end

s1 = """
..3|..9|6..
4..|..2|..3
862|153|.9.
---+---+---
5.7|2.6|.3.
.3.|5..|...
6.9|.7.|.51
---+---+---
.2.|4.8|..7
.4.|.3.|.2.
3..|.25|148
"""

# 753|849|612
# 491|762|583
# 862|153|794
# ---+---+---
# 517|286|439
# 234|591|876
# 689|374|251
# ---+---+---
# 925|418|367
# 148|637|925
# 376|925|148

s2 = """
.86|...|...
...|.5.|92.
...|.4.|5.3
---+---+---
.7.|..2|.1.
...|..3|.9.
.28|..7|...
---+---+---
2..|6..|...
...|...|.34
3..|1..|..7
"""

# 586|329|471
# 134|756|928
# 792|841|563
# ---+---+---
# 473|962|815
# 651|483|792
# 928|517|346
# ---+---+---
# 247|638|159
# 819|275|634
# 365|194|287

s3 = """
...|...|.1.
...|..2|..3
...|4..|...
---+---+---
...|...|5..
4.1|6..|...
..7|1..|...
---+---+---
.5.|...|2..
...|.8.|.4.
.3.|91.|...
"""

# 745|368|912
# 819|572|463
# 362|491|857
# ---+---+---
# 693|824|571
# 421|657|398
# 587|139|624
# ---+---+---
# 158|746|239
# 976|283|145
# 234|915|786

main(s1)
bmain(s1)
</pre>

<h2 id="JSON">JSON-Parser</h2>
<pre class="moss">
# data = json.load(json_string)
# json_string = json.dump(data)
# json.dump(data,{trim,nan})
# trim: no whitespace
# nan: allow NaN and Infinity

use math: isnan, isinf

Bracket = object()
Separator = object()
mode_nan = null

keyword_tab = {
  "null": [null,null],
  "true": [Bool,true],
  "false": [Bool,false],
  "NaN": [Float,math.nan],
  "Infinity": [Float,math.inf]
}

escape_tab = {
  "n": "\n",
  "r": "\x0d",
  "t": "\t",
  "b": "\x08",
  "f": "\x0c",
  "\b": "\b",
  "\d": "\d",
  "/": "/"
}

json_repr_tab = {
  "\n": "\bn",
  "\t": "\bt",
  "\d": "\b\d",
  "\x0d": "\br",
  "\x08": "\bb",
  "\x0c": "\bf",
  "\b": "\b\b"
}

function syntax_error(line,col,s)
  raise "Line {}, col {}\nSyntax error: {}"%[line+1,col+1,s]
end

function encode_escape(s)
  if '\b' in s
    a=[]
    sequence=false
    unicode=false
    for c in s
      if sequence
        sequence=false
        a.push(escape_tab[c])
      elif c=='\b'
        sequence=true
      else
        a.push(c)
      end
    end
    return a.join()
  else
    return s
  end
end

function scan(s)
  i=0
  n=size(s)
  a=[]
  line=0; col=0
  negate=false
  while i&lt;n
    c=s[i]
    if c.isdigit()
      j=i; hcol=col
      f=false
      while i&lt;n
        if s[i] in '.Ee'
          f=true
        elif not s[i].isdigit()
          break
        end
        i+=1; col+=1
      end
      x = (float if f else int)(s[j..i-1])
      if negate
        negate=false
        x=-x
      end
      a.push([Float if f else Int, x, line, hcol])
    elif c.isalpha()
      j=i; hcol=col
      while i&lt;n and s[i].isalpha()
        i+=1; col+=1
      end
      w = s[j..i-1]
      if w in keyword_tab
        T,value = keyword_tab[w]
        if T is Float and negate
          negate=false
          value=-value
        end
        a.push([T,value,line,hcol])
      else
        raise ("Line {}, col {}\nSyntax error:\s"+
          "unexpected identifier '{}'.")%[line+1,col+1,w]
      end
    elif c in "{}[]"
      a.push([Bracket,c,line,col])
      i+=1; col+=1
    elif c in ",:"
      a.push([Separator,c,line,col])
      i+=1; col+=1
    elif c=='"'
      hcol=col
      i+=1; col+=1; j=i
      while i&lt;n
        if s[i]=='\b'
          i+=2; col+=2
        elif s[i]=='"'
          break
        else
          i+=1; col+=1
        end
      end
      a.push([String,s[j..i-1],line,hcol])
      i+=1; col+=1
    elif c.isspace()
      if c=='\n'
        line+=1; col=0
      else
        col+=1
      end
      i+=1
    elif c=='-'
      i+=1; col+=1
      negate = not negate
    else
      raise ("Line {}, col {}\nSyntax error:\s"+
        "unexpected character '{}'.")%[line+1,col+1,c]
    end
  end
  return a
end

function get_token(i)
  n,a=i
  if n&gt;=size(a)
    if size(a)&gt;0
      syntax_error(a[-1][2],a[-1][3],"expected a token.")
    else
      syntax_error(-1,-1,"expected a token.")
    end
  else
    return a[n]
  end
end

function atom(x)
  if x[0] is Int or x[0] is Float
    return x[1]
  elif x[0] is String
    return encode_escape(x[1])
  elif x[0] is Bool or x[0] is null
    return x[1]
  else
    syntax_error(x[2],x[3],"unknown atom.")
  end
end

function list_expression(i)
  a=[]
  x = get_token(i)
  if x[0] is Bracket and x[1]==']'
    i[0]+=1
    return a
  end
  while true
    t = expression(i)
    a.push(t)
    x = get_token(i)
    if x[0] is Separator and x[1]==','
      i[0]+=1
      continue
    elif x[0] is Bracket and x[1]==']'
      i[0]+=1
      break
    else
      syntax_error(x[2],x[3],"expected ',' or ']'.")
    end
  end
  return a
end

function map_expression(i)
  d={}
  x = get_token(i)
  if x[0] is Bracket and x[1]=='}'
    i[0]+=1
    return d
  end
  while true
    key = expression(i)
    x = get_token(i)
    if not x[0] is Separator or x[1]!=':'
      syntax_error(x[2],x[3],"expected ':'.")
    end
    i[0]+=1
    value = expression(i)
    d[key]=value
    x = get_token(i)
    if x[0] is Separator and x[1]==','
      i[0]+=1
      continue
    elif x[0] is Bracket and x[1]=='}'
      i[0]+=1
      break
    else
      syntax_error(x[2],x[3],"expected ',' or '}'.")
    end
  end
  return d
end

function expression(i)
  x = get_token(i)
  if x[0] is Bracket
    if x[1]=='['
      i[0]+=1
      return list_expression(i)
    elif x[1]=='{'
      i[0]+=1
      return map_expression(i)
    end
  else
    i[0]+=1
    return atom(x)
  end
end

function load(s)
  a = scan(s)
  i = [0,a]
  return expression(i)
end

function is_atomic(a)
  a.all(fn|x|
    T = type(x)
    return not(T is List or T is Tdict) or size(x)==0
  end)
end

function json_str_repr(s)
  a=["\d"]
  for c in s
    if c in json_repr_tab
      a.push(json_repr_tab[c])
    else
      a.push(c)
    end
  end
  a.push("\d")
  return a.join()
end

function json_float_repr(x)
  if isnan(x)
    return "NaN" if mode_nan else "\dNaN\d"
  elif isinf(x)
    if x&lt;0
      return "-Infinity" if mode_nan else "\d-Infinity\d"
    else
      return "Infinity" if mode_nan else "\dInfinity\d"
    end
  else
    return str(x)
  end
end

function dump_rec(a,n,x)
  T = type(x)
  if T is Int or T is Bool or T is null
    a.push(x)
  elif T is Float
    a.push(json_float_repr(x))
  elif T is String
    a.push(json_str_repr(x))
  elif T is List
    m = size(x)
    if is_atomic(x)
      a.push("[")
      for i in 0..m-2
        dump_rec(a,0,x[i])
        a.push(",\s")
      end
      if m&gt;0
        dump_rec(a,0,x[-1])
      end
      a.push("]")
    else
      a.push("[\n")
      for i in 0..m-2
        a.push("\s"*(n+2))
        dump_rec(a,n+2,x[i])
        a.push(",\n")
      end
      if m&gt;0
        a.push("\s"*(n+2))
        dump_rec(a,n+2,x[-1])
        a.push("\n")
      end
      a.push("\s"*n,"]")
    end
  elif T is Tdict
    if size(x)==0
      a.push("{}")
      return null
    end
    a.push("{\n")
    x = list(x).sort(|t| str(t[0]))
    m = size(x)
    for i in 0..m-2
      a.push("\s"*(n+2))
      dump_rec(a,n+2,str(x[i][0]))
      a.push(":\s")
      dump_rec(a,n+2,x[i][1])
      a.push(",\n")
    end
    if m&gt;0
      a.push("\s"*(n+2))
      dump_rec(a,n+2,str(x[-1][0]))
      a.push(":\s")
      dump_rec(a,n+2,x[-1][1])
      a.push("\n")
    end
    a.push("\s"*n,"}")
  else
    a.push("\dobject\d")
  end
end

function dump_rec_compressed(a,x)
  T = type(x)
  if T is Int or T is Bool or T is null
    a.push(x)
  elif T is Float
    a.push(json_float_repr(x))
  elif T is String
    a.push(json_str_repr(x))
  elif T is List
    m = size(x)
    a.push("[")
    for i in 0..m-2
      dump_rec_compressed(a,x[i])
      a.push(",")
    end
    if m&gt;0
      dump_rec_compressed(a,x[-1])
    end
    a.push("]")
  elif T is Tdict
    a.push("{")
    x = list(x).sort(|t| str(t[0]))
    m = size(x)
    for i in 0..m-2
      dump_rec_compressed(a,str(x[i][0]))
      a.push(":")
      dump_rec_compressed(a,x[i][1])
      a.push(",")
    end
    if m&gt;0
      dump_rec_compressed(a,str(x[-1][0]))
      a.push(":")
      dump_rec_compressed(a,x[-1][1])
    end
    a.push("}")
  else
    a.push("\dobject\d")
  end
end

function dump(x,*argv)
  t = argv[0] if size(argv)!=0 else {}
  global mode_nan
  mode_nan = "nan" in t
  a=[]
  if "trim" in t
    dump_rec_compressed(a,x)
  else
    dump_rec(a,0,x)
  end
  return a.join()
end
</pre>

</body>
</html>

