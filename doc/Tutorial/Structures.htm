<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Structures</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js">
  </script>
</head>
<body>

<h1>Data structures</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#Singly">Singly linked list</a>
</ol>
</div>

<p>There are interesting, more complex data structures that
are not supported in the core language. But the language
provides the basic tools that are necessary for the construction
of such data structures like linked lists or trees.
</p>

<h2 id="Singly">
Singly linked list</h2>

<p>What follows is a basic implementation of a singly linked list
data type.
</p>

<pre class="moss">
function linked_list(a)
  y = table LinkedList{
    first=null, last=null
  }
  for x in a
    y.push(x)
  end
  return y
end

LinkedList = table{
  function list
    t = self.first
    a = []
    while not t is null
      a.push(t.value)
      t = t.next
    end
    return a
  end,
  
  function str
    return "linked_list(["+self.list().join(", ")+"])"
  end,

  function push(x)
    if self.first is null
      self.last = table{value=x, next=null}
      self.first = self.last
    else
      self.last.next = table{value=x, next=null}
      self.last = self.last.next
    end
  end,

  function shift(x)
    t = table{value=x, next=self.first}
    self.first = t
  end,

  function unshift
    if self.first is null
      return null
    else
      value = self.first.value
      self.first = self.first.next
      return value
    end
  end
}
</pre>

<p>It can be used as a queue data type.
</p>
<pre class="moss">
&gt; q = linked_list([])
&gt; q.push(1)
&gt; q.push(2)
&gt; q.push(3)
&gt; q.unshift()
1
&gt; q.unshift()
2
</pre>

</body>
</html>


