<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Functions</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js">
  </script>
</head>
<body>

<h1>Functions</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#rec">Recursion</a>
<li><a href="#pf">Passing functions</a>
<li><a href="#currying">Currying</a>
<li><a href="#closures">Closures</a>
<li><a href="#rp">Reference parameters</a>
<li><a href="#var">Variadic functions</a>
<li><a href="#opt">Optional arguments</a>
<li><a href="#named">Named arguments</a>
<li><a href="#unpacking">List unpacking</a>
<li><a href="#argc">Argument count</a>
<li><a href="#methods">Methods</a>
<li><a href="#app">Function application</a>
<li><a href="#return">Multiple return values</a>
<li><a href="#static">Static variables</a>
<li><a href="#lazy">Lazy evaluation</a>
<li><a href="#assignments">Assignments to calls</a>
</ol>
</div>


<h2 id="rec">Recursion</h2>

<p>Let <code>sum</code> be a function that takes two arguments
<code>a,b</code> and returns their sum <code>a+b</code>. There is a
recursive algorithm which only needs the functions successor and
predecessor to perform the computation.

<pre class="moss">
succ = |x| x+1
pred = |x| x-1

sum = |a,b| a if b==0 else sum(succ(a),pred(b))
</pre>

<p>Inside of the last function there is a call to the global variable
<code>sum</code> which points to the function itself. Note that
because of this we are not allowed to change the name of the function
and overwrite its old name. Instead of using a global variable we
can use a private variable which will point to the function itself more
directly. Then overwriting the old name becomes possible.
<pre class="moss">
sum = sub f|a,b| a if b==0 else f(succ(a),pred(b)) end

# Now valid
old_sum = sum
sum = some_other_function
</pre>


<h2 id="pf">Passing functions</h2>

<p>Normal control flow has a specific restriction which is dissolved
if we regard functions as objects that can be stored in variables
and passed to other functions.

<p>In normal control flow a program can call a subprogram which
can call another subprogram which can call another subprogram
and so on. The program can choose which subprogram is called
by using if-statements, but <i>knows</i> already what subprograms
are avaiable. What if the program <i>does not</i> know about
the subprograms it can call? Not that the number of possible
subprograms is too large, but that the
program really does not know the subprogram in before.

<p>If the subprogram to call is stored in a global variable,
a compound object or passed as an argument, the program only needs
to know the subprogram just before the call.

<p>One of the easiest examples is the function <code>map</code>
which applies a given function to each element of a list.
<pre class="moss">
map = sub|a,f|
  b=[]
  for x in a
    b.push(f(x))
  end
  return b
end

A = [1,2,3,4]
F = |x| 2*x
print(map(A,F))
# Output:
# [2, 4, 6, 8]
</pre>

<p>Interestingly, passing functions allows the construction of custom
control structures. A basic for loop is written without much effort.
<pre class="moss">
For = sub|a,b,f|
  i=a
  while i&lt;=b
    f(i)
    i++
  end
end

For(1,4,sub|i|
  print(i, "^ = ", str(2^i).rjust(2,"0"))
end)
# 2^1 = 02
# 2^2 = 04
# 2^3 = 08
# 2^4 = 16
</pre>


<h2 id="currying">Currying</h2>

<p>Let us implement numerical differentiation.
The first way one can think to do this, is to use the
definition of the derivative directly.
<pre class="moss">
diff = sub|f,x| h=0.001
  return (f(x+h)-f(x))/h
end
</pre>

<p>This is a little bit naive. The following algorithm does it
better, because it cancels out errors.
<pre class="moss">
diff = sub|f,x| h=0.001
  return (f(x+h)-f(x-h)/(2*h)
end
</pre>

<p>The differential operator can also be seen as an operator that
takes a function and returns a function (the derivative). If we
use currying, we can use both views directly.
<pre class="moss">
D = |f| |x| diff(f,x)
</pre>

<p>Now <code>D</code> is the differential operator, <code>D(f)</code>
is the first derivative and <code>D(f)(x)</code> is the same
as <code>diff(f,x)</code>. And that is simply currying. The
operator&nbsp;<code>D</code> is the curried form of <code>diff</code>.


<h2 id="closures">Closures</h2>

<p>In Moss we are able to generate functions from data at runtime.
To achieve this, it must be possible to bind some data to a
function dynamicly. Such a binding is called <em>closure</em>.

<p>A simple example is the conversion of a list <code>a</code>
into a function <code>f</code>, so
that <code>f(i)==a[i]</code> for all indices of <code>a</code>.

<pre class="moss">
&gt; fn = |a| |i| a[i]
&gt; f = fn([4,2,3,1])
</pre>

<p>Furthermore, the bound data can itself be a function, because data,
that are all kinds of objects. A basic example is again the
differential operator.


<h2 id="rp">Reference parameters</h2>

<p>Moss has only (only has) "call by value". The following code does
not work, because <code>city</code> is called by value. We cannot
modify the variable <code>city</code> from inside of the function
<code>stars</code>.

<pre class="moss">
sub stars(s)
  s="*"+s+"*"
end

city = "London"
stars(city)
print(city)
# London
</pre>

<p>If we want reference parameters we have to use a reference
variable. Such a variable can be simulated as a list with only
one element.

<pre class="moss">
sub stars(a)
  a[0]="*"+a[0]+"*"
end

city = ["London"]
stars(city)
print(city[0])
# *London*
</pre>

<p>An object can be used instead of a list.
If there are many arguments, this has better readability.

<pre class="moss">
sub stars(s)
  s.value = "*"+s.value+"*"
end

city = object()
city.value = "London"
stars(city)
print(city.value)
# *London*
</pre>


<h2 id="var">Variadic functions</h2>

<p>If the formal argument of a function is prefixed by an asterisk,
the argument list might have any argument count and will be
automatically converted into a list.
<pre class="moss">
&gt; p = |*a| a.join("|")
&gt; p(1,2,3,4)
"1|2|3|4"
</pre>

<p>There may be obligatory arguments.
<pre class="moss">
&gt; p = |x,y,*a| x+a.join("|")+y
&gt; p("(",")",1,2,3,4)
"(1|2|3|4)"
</pre>

<p>In most situations it is preferable to use explicit lists
instead. That is, to simply remove the asterisks. Then the
function call is as follows.
<pre class="moss">
&gt; p("(",")",[1,2,3,4])
"(1|2|3|4)"
</pre>


<h2 id="opt">Optional arguments</h2>

<p>For the last formal argument, a default value may be specified.
If the actual argument is omitted, this default value is taken.

<pre class="moss">
p = |x,y,sep=", "| ["(",x,sep,y,")"].join()

&gt; p(1,2)
"(1, 2)"
&gt; p(1,2,"|")
"(1|2)"
</pre>


<h2 id="named">
Named arguments</h2>

<p>Named arguments can be simulated by dictionarys.

<pre class="moss">
&gt; p = |d| ["(",d["x"],d["sep"],d["y"],")"].join()
&gt; p({x=1,y=2,sep="|"})
"(1|2)"
</pre>

<p>For convenience, such an dictionary can be unpacked, allowing
named default arguments:
<pre class="moss">
sub p(d)
  {x,y,sep=", "}=d
  return ["(",x,sep,y,")"].join()
end
</pre>

<p>A default configuration could be given for everything:
<pre class="moss">
sub p(d={})
  {x="x", y="y", sep=", "}=d
  return ["(",x,sep,y,")"].join()
end
</pre>


<h2 id="unpacking"
>List unpacking</h2>

<p>Sometimes we want a variadic function <code>f</code> to take the
elements of a list as its arguments. To make this task simple,
there is an generalized application operation <code>f.apply(a)</code>.

<pre class="moss">
# variadic summation function
&gt; s = |*a| a.sum()

# normal call
&gt; s(1,2,3,4)
10

# unpacking call
&gt; a = [1,2,3,4]
&gt; s.apply(a)
10
</pre>

<p>Now we can precisely state a feature of <code>print</code>.

<pre class="moss">
# One can transform
print("abcd") == print("a","b","c","d")
== print.apply(["a","b","c","d"]) == print.apply(list("abcd"))

# So, in general, if s is a string
print(s) == print.apply(list(s))
</pre>

<p>If an unpacking call gets two arguments, the first
argument is the self argument.
So, if <code>x</code> is an object and <code>m</code> is a two
argument method of <code>x</code>, we have</code>

<pre class="moss">
  x.m(a,b) == x.m.apply(x,[a,b]).
</pre>


<h2 id="argc">Argument count</h2>

<p>If a function <code>f</code> is not variadic, it has a fixed
number of arguments. This number is determined by
<code>f.argc()</code>.

<p>An application is a general truth table
printing program, that determines the table to print based on
the number of arguments of a given boolean function.

<pre class="moss">
sub truth_table(f)
  a = [false,true]^f.argc()
  for x in a
    print((x+[f.apply(x)]).map(int))
  end
end
</pre>


<h2 id="methods">Methods</h2>

<p>In Moss, every function has a hidden argument, called
<code>self</code>. In a function call of the form
<code>x.m(a,b)</code>, the function <code>m</code> takes
<code>a,b</code> as normal arguments, and <code>x</code> as its
self argument. Viewed this way, <code>m</code> is called
<em>a method</em> of <code>x</code>.

<p>The self argument can be given explicitly:
<pre class="moss">
  f(a,b) == f(null; a,b),
  x.m(a,b) == x.m(x; a,b).
</pre>

<p>A simple example shows how self arguments work.
<pre class="moss">
&gt; m = |a,b| [self,a,b]
&gt; m(1,2)
[null, 1, 2]
&gt; m(0;1,2)
[0, 1, 2]
</pre>

<p>If <code>m</code> is inserted in <code>Str</code>,
all strings will have <code>m</code> as a method.
<pre class="moss">
&gt; Str.m=m
&gt; "alpha".m(1,2)
["alpha", 1, 2]
</pre>

<p>Conversely, we can extract some method of
<code>Str</code>.
<pre class="moss">
&gt; "tree".upper()
"TREE"
&gt; upper = Str.upper
&gt; upper("tree";)
"TREE"
</pre>

<p>But in most cases this is not what we want.
If you want the method <code>upper</code> to be converted into a
function, simply create such a function.
<pre class="moss">
&gt; upper = |s| s.upper()
&gt; upper("tree")
"TREE"
</pre>

<p>There is still a little thing to be noted:
One can choose a unique name instead of "self".
Let us use "x" instead of "self". Then the example from above
reads:
<pre class="moss">
&gt; m = |x;a,b| [x,a,b]
&gt; m(0;1,2)
[0,1,2]
</pre>

<p>This is needed in case an inner function literal shadows
an outer one. So, for example
<pre class="moss">
Function.ADD = |g| |x| self(x)+g(x)
</pre>

<p>will no work as intended. Instead one has to state
this as
<pre class="moss">
Function.ADD = |f;g| |x| f(x)+g(x)
</pre>

<p>wich, in this case, also looks clearly more likeable.
One could have written:
<pre class="moss">
Function.ADD = sub|g|
  f = self
  return |x| f(x)+g(x)
end
</pre>
<p>But that is not for the sake of brevity.


<h2 id="app">Function application</h2>

<p>As just said, in Moss there is no invisible times. Instead
of <code>ab</code> or <code>a&nbsp;b</code> one must write
<code>a*b</code>. But the function application operator is
invisible. The expression <code>f(x,y)</code> means
<pre>
  f applied to (x,y).
</pre>

<p>The parenthesis pair on the right hand side is obligatory.
Now note, that the left hand side of this operator can itself
be an expression. If <code>e</code> is some expression, then
<code>(e)(x,y)</code> means
<pre>
  (e) applied to (x,y).
</pre>
<p>Here are some examples.
<pre>
f(x)(y) means (f applied to x) applied to y
a[k](x) means a[k] applied to x
</pre>

<p>Let us define addition of functions pointwise.
Look what that means.
<pre class="moss">
Function.ADD = |f;g| |x| f(x)+g(x)
</pre>

<p>Now one can write <code>(f+g)(x)</code>.

<p>If <code>t</code> is a pair, one can write
<code>f[t]</code> instead of <code>f(t[0],t[1])</code>.
That is a more general way of function application,
because one can always write <code>f.apply([t[0],t[1]])</code>.
In general one has
<pre class="moss">
  f(x,y) == f(null; x,y) == f.apply([x,y]),
a.m(x,y) == a.m(a; x,y)  == a.m.apply(a,[x,y]).
</pre>


<h2 id="return">Multiple return values</h2>

<p>In Moss one can assign two values to two variables in one
statement.
<pre class="moss">
x,y = 360,240
# is the same as
x=360; y=240
</pre>

<p>But there is more going on here. Actually it is a shorthand.
Firstly the numbers on the right hand side are bundled, so that a
list is constructed. The square brackets are simply omitted.
Secondly the list is deconstructed on the right hand side.
The long, more powerful, form of this statement is as follows.
<pre class="moss">
[x,y] = [360,240]
</pre>

<p>We want <code>x,y</code> to be the coordinates of some
point of a circle line. This can be achieved by the following
function&nbsp;<code>f</code>.
<pre class="moss">
use math: pi, sin, cos

f = |t,r| [r*cos(2*pi*t), r*sin(2*pi*t)]

for i in 0..11
  x,y = f(i/12,1)
  print("x = ",x,"; y = ",y)
end
</pre>

<h2 id="static">Static variables</h2>

<p>Sometimes one wants a local variable to survive between two
function calls. We could use a global variable instead of a
local one.
<pre class="moss">
counter_c=0
sub counter
  counter_c++
  return counter_c
end
</pre>

<p>It is wiser to clarify more clearly that <code>c</code> belongs
to the function. Here is the way to go.

<pre class="moss">
sub counter
  counter.c++
  return counter.c
end
counter.c=0
</pre>

<p>Now we are able to construct multiple instances of
<code>counter</code>.
<pre class="moss">
c1 = copy(counter)
c2 = copy(counter)
c2.c = 1000
c3 = copy(c2)
</pre>

<p>There is an alternative construction that is more didactical.
It is secure against any kind of misuse.
At first we want <code>c</code> to be a private variable
of <code>counter</code>.
<pre class="moss">
begin
  global counter
  c=0
  sub counter
    c++
    return c
  end
end
</pre>

<p>The last program can be turned into a function that creates
a counter based on a start value.
<pre class="moss">
sub new_counter(c)
  return sub||
    c++
    return c
  end
end

c1 = new_counter(0)
c2 = new_counter(1000)
c3 = copy(c2)
</pre>

<h2 id="lazy">Lazy evaluation</h2>

<p>Lazy evaluation is not standard in Moss, but one can simulate
it like in Scheme.
<table class="bt">
<tr>
<th>Moss
<th>Scheme
<tr>
<td><code>t=|| expression
<td><code>(define t (delay expression))</code>
<tr>
<td><code>t()</code>
<td><code>(force t)</code>
</table>

<p>Now let us build such an infinite tree:
<pre>
                    0
                   / \
                  /   \
                 /     \
                /       \
               /         \
              /           \
             /             \
            /               \
           /                 \
          /                   \
         0                     1
        / \                   / \
       /   \                 /   \
      /     \               /     \
     /       \             /       \
    0         1           1         2
   / \       / \         / \       / \
  0   1     1   2       1   2     2   3
 / \ / \   / \ / \     / \ / \   / \ / \
.. ... .. .. ... ..   .. ... .. .. ... ..
</pre>

<pre class="moss">
# This won't work
sub tree(x)
  table x=x, left=tree(x), right=tree(x+1) end
end
print(tree(0).right.right.right.x)

# We have to use explicit lazy evaluation
sub tree(x)
  table x=x, left=|| tree(x), right=|| tree(x+1) end
end
print(tree(0).right().right().right().x)
</pre>

<p>In some constructions, a value could either be a lazy expression
or a normal value.
In this case, lazy expressions should have their own data type.

<pre class="moss">
lazy_type = table
  str = || "lazy expression"
end
sub delay(f)
  table[lazy_type] call=f end
end
sub force(x)
  x.call() if type(x) is lazy_type else x
end

t = delay(|| 1+2)
print([force(2), force(t)])
</pre>

<p>But in most constructions, a value is never a function.
In such cases we can simply check for a function.
<pre class="moss">
sub force(x)
  x() if type(x) is Function else x
end
print([force(2), force(|| 1+2)])
</pre>

<h2 id="assignments"
>Assignments to calls</h2>

<p>In some assignment <code>y=f(x)</code>,
that <code>y</code> is some variable and the value <code>f(x)</code>
is assigned to it. But how do we interpret <code>g(x)=y</code>?
A value can be assigned to a variable, but not to a value.
Therefore <code>g(x)</code> on the left side cannot be a value,
but something that can be considered as variable.

<p>In Moss, such an assignment to a function application is
simply syntactic sugar.
<pre class="moss">
# Any assignment of the form
  g(x) = y
# is strictly equivalent to
  set_g(x,y)

# Any assignment of the form
  a.m(x) = y
# is strictly equivalent to
  a.set_m(x,y)

# More general
  g(x1, ..., xn) = y
  a.m(x1, ..., xn) = y
# are strictly equivalent to
  set_g(x1, ..., xn, y)
  a.set_m(x1, ..., xn, y)

# Note that
  a.m(x) = y1,y2
# is the same as
  a.m(x) = [y1,y2]
# and therefore
  a.set_m(x,[y1,y2])
</pre>

<p>An example. We want the dictionary data type to have a
method that assigns a value to a key, but implicitly converts
the key into a string in before.
<pre class="moss">
extend(Map,table
  sub get(key)
    return self[str(key)]
  end,
  sub set_get(key,value)
    self[str(key)]=value
  end
end)

d = {}
d.get("a") = 10
d.get(2) = 11
print(d)

# Output:
# {"a": 10, "2": 11}
# which is not the same as 
# {"a": 10, 2: 11}
</pre>

</body>
</html>

