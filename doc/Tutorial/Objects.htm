<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Object system</title>
  <link rel="stylesheet" href="../css/main.css">
  <script src = "../js/syntax.js">
  </script>
</head>
<body>

<h1>Object system</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#Construction">Construction</a>
<li><a href="#Literal">Object literal</a>
<li><a href="#Prototypes">Prototypes</a>
<li><a href="#Basic-data-types">Basic data types
<li><a href="#Inheritance">Multiple inheritance</a>
<li><a href="#Reflection">Reflection</a>
<li><a href="#Monkey">Monkey patching</a>
<li><a href="#Overloading">Operator overloading</a>
<li><a href="#Destructors">Destructors</a>
<li><a href="#Read-only">Read-only properties</a>
<li><a href="#Private">Private properties</a>
</ol>
</div>

<h2 id="Construction">
Construction</h2>

<p>We can take different approaches to construct an object. A simple
object can be constructed in one of the following three ways or
a mixture of them.
</p>

<pre class="moss">
# imperative construction
# vmax in kn
Bristol = object()
Bristol.id = "HMS Bristol"
Bristol.color = "gray blue"
Bristol.engine = "diesel"
Bristol.vmax = 25

# via dictionary literal
Bristol = object(null,{
  id="HMS Bristol",
  color="gray blue",
  engine="diesel",
  vmax=25
})

# via object literal
Bristol = table{
  id = "HMS Bristol",
  color = "gray blue",
  engine = "diesel",
  vmax = 25
}
</pre>

<p>Such an object may have a method which operates on it.
We will define one.
</p>

<pre class="moss">
Bristol.move = fn||
  print(self.id, " moves at ", self.vmax//2, " kn.")
end

Bristol.move()
# HMS Bristol moves at 12 kn.
</pre>

<p>If there shall be more than one ship, there are certain options
now. Firstly we can simply delegate to HMS Bristol and shadow
some of the member objects.
</p>

<pre class="moss">
Hermes = object(Bristol)
Hermes.id = "HMS Hermes"
Hermes.vmax = 25
</pre>

<p>But we might also clone HMS Hermes completely and then
overwrite some of the member objects.
</p>

<pre class="moss">
Hermes = object()
extend(Hermes,Bristol)
Hermes.id = "HMS Hermes"
Hermes.vmax = 25
</pre>

<p>Another way is to use a constructor <code>ship</code>
and a metaobject <code>Ship</code>.
</p>

<pre class="moss">
ship = fn|id,vmax|
  return object(Ship,{"id": id, "vmax": vmax})
end

Ship = table{
  color = "gray blue",
  engine = "diesel",
  move = fn||
    print(self.id, " moves at ", self.vmax//2 " kn.")
  end
}

Bristol = ship("HMS Bristol",25)
Hermes = ship("HMS Hermes",25)
</pre>

<p>Frankly speaking, the metaobject <code>ship.type</code> can be
regarded as a table of virtual methods and class variables.
</p>


<h2 id="Literal">
Object literal</h2>

<p>The following ways to construct Hermes have the same result.
</p>

<pre class="moss">
Hermes = object(Bristol)
Hermes.id = "HMS Hermes"
Hermes.vmax = 25

Hermes = object(Bristol,{
  id = "HMS Hermes",
  vmax = 24
})

Hermes = object(Bristol,{
  "id": "HMS Hermes",
  "vmax": 24
})

Hermes = table Bristol{
  id = "HMS Hermes",
  vmax = 24
}

Hermes = table Bristol{
  "id": "HMS Hermes",
  "vmax": 24
}
</pre>


<h2 id="Prototypes">
Prototypes</h2>

<p>Every object <code>x</code> has a prototype.
If some member object is not found in <code>x</code>, it will be
looked up in the prototype of <code>x</code> and then in the
prototype of the prototype of <code>x</code> and so on.
</p>

<p>In Moss, the type of an object and its prototype coincide,
because the type of an object is determined by its prototype.
The prototype stores the propertys and operations, that objects
of some kind have in common.
</p>

<pre class="moss">
a = object(null,{time="14:12"})
# a is a new object with prototype null

b = object(a)
# b is a new object with prototype a

type(b) is a
# true

type(null) is null
# true, null is its own prototype and is the only
# object which shall have this property

print(b.time)
# 14:12
# b does not have 'time', but a has it
</pre>

<p>There are two ways to determine, whether some object is of some
type or not.
</p>
<pre class="moss">
&gt; T = object()
&gt; S = object(T)
&gt; a = object(S)

# T is not the direct prototype of a.
&gt; type(a) is T
false
&gt; type(a) is S
true

# But a is an ancestor of T.
&gt; a is in T
true
&gt; a is in S
true

# S is a subtype of T.
&gt; S is in T
true

# S is a direct subtype of T.
&gt; type(S) is T
true
</pre>

<p>If <code>S</code> was extended by <code>T</code>, we must
take a different approach.
</p>

<pre class="moss">
&gt; T = table{a=1, b=2}
&gt; S = table{c=3}
&gt; extend(S,T)

# This won't work anymore.
&gt; S is in T
false

# But one can test, whether all members of T
# are contained in S.
&gt; record(T) &lt; record(S)
true
</pre>

<h2 id="Basic-data-types">Basic data types</h2>

<p>Variables of all basic data types as well as the data types
itself are objects. Thus the object system applies
to the basic data types too. Type checks are performed in one
of three ways:
<pre class="moss">
&gt; x = 1
&gt; x is in Int
true
&gt; type(x) is Int
true
&gt; str(type(x))=="Int"
true
</pre>

<p>Here is a list of the basic data types:
<pre>
  Bool, Int, Long, Float, Complex,
  Range, List, Map, String, Function.
</pre>

<p>A data type is written capitalized, the corresponding constructor
function in lower case.
<pre class="moss">
&gt; list(1..10) is in List
true
</pre>

<h2 id="Inheritance">Multiple inheritance</h2>

<p>An object can have more than one prototype.
</p>

<pre class="moss">
Plane = table{
  take_off = fn||
    print(self.id, " is in the sky.")
  end
}

sea_duck = table[Ship,Plane]{
  id="Sea duck",
  vmax = 40
}

sea_duck.move()
# Sea duck moves at 20 kn.

sea_duck.take_off()
# Sea duck is in the sky.
</pre>

<p>A method is searched at first in <code>Ship</code>,
and then, if not found, in <code>Plane</code>.
</p>

<h2 id="Reflection">
Reflection</h2>

<p>Reflection is the possibility to construct, obtain and modify the
structure of a type at runtime.
</p>

<pre class="moss">
# direct construction
Bristol = table{color = "gray blue", engine = "diesel"}

# reflection
x = "color"; y = "engine"
Bristol = table{x: "gray blue", y: "diesel"}

# direct access
&gt; Bristol.engine
"diesel"

# reflection
&gt; record(Bristol)["engine"]
"diesel"

# direct method call
&gt; Bristol.move()

# reflection
&gt; record(Bristol)["move"](Bristol;)
</pre>

<p>That argument before the semicolon is the
<a href="Functions.htm#methods">self</a> argument.
</p>

<h2 id="Monkey">
Monkey patching</h2>

<p>We are able to add methods to already existent types. This
technique is called <em>monkey patching</em> and considered a bad
practice, because it can result in name conflicts.
</p>

<p>As an example, we will add a method to the string type, that
converts a string of numbers into the list of these numbers.
</p>

<pre class="moss">
&gt; String.numbers = || self.split(",").map(int)
&gt; "12, 14, 16".numbers()
[12, 14, 16]

&gt; List.pairs = || self.chunks(2)
&gt; list(1..4).pairs()
[[1,2], [3,4]]
</pre>

<h2 id="Overloading">
Operator overloading</h2>

<p>Table of binary overloadable operators.
</p>
<table class="bt">
<tr>
  <th>Op.
  <th>left
  <th>right
<tr>
  <td class="r"><code>a+b</code>
  <td><code>add</code>
  <td><code>radd</code>
<tr>
  <td class="r"><code>a-b</code>
  <td><code>sub</code>
  <td><code>rsub</code>
<tr>
  <td class="r"><code>a*b</code>
  <td><code>mul</code>
  <td><code>rmul</code>
<tr>
  <td class="r"><code>a/b</code>
  <td><code>div</code>
  <td><code>rdiv</code>
<tr>
  <td class="r"><code>a//b</code>
  <td><code>idiv</code>
  <td><code>ridiv</code>
<tr>
  <td class="r"><code>a^b</code>
  <td><code>pow</code>
  <td><code>rpow</code>
<tr>
  <td class="r"><code>a==b</code>
  <td><code>eq</code>
  <td><code>req</code>
<tr>
  <td class="r"><code>a&lt;b</code>
  <td><code>lt</code>
  <td><code>rlt</code>
<tr>
  <td class="r"><code>a&gt;b</code>
  <td><code>gt</code>
  <td><code>rgt</code>
<tr>
  <td class="r"><code>a&lt;=b</code>
  <td><code>le</code>
  <td><code>rle</code>
<tr>
  <td class="r"><code>a&gt;=b</code>
  <td><code>ge</code>
  <td><code>rge</code>
</table>

<p>Table of unary overloadable operators.
</p>
<table class="bt">
<tr>
  <th>Op.
  <th>Method
<tr>
  <td class="r"><code>-a</code>
  <td><code>neg</code>
<tr>
  <td class="r"><code>~a</code>
  <td><code>tilde</code>
</table>

<p>Here is an implementation of complex number arithmetic.
Complex numbers are covered already by the moss language,
but this implementation allows also for arithmetic of
complex integers.
</p>
<pre class="moss">
function complex(x,y)
  return table Complex{re=x, im=y}
end

Complex = table{
  function string
    return ["(", self.re, ", ", self.im, ")"].join()
  end,
  function add(a;b)
    if type(b) is Complex
      return complex(a.re+b.re,a.im+b.im)
    else
      return complex(a.re+b,a.im)
    end
  end,
  function radd(a;b)
    return complex(a+b.re,b.im)
  end,
  function mul(a;b)
    if type(b) is Complex
      return complex(a.re*b.re-a.im*b.im,
        a.re*b.im+a.im*b.re)
    else
      return complex(a.re*b,a.im*b)
    end
  end,
  function rmul(a;b)
    return complex(a*b.re,a*b.im)
  end,
  function pow(a;n)
    return (1..n).prod(|k| a)
  end
}


# Example of use

&gt; i = complex(0,1)
&gt; 4+2*i
(4, 2)
&gt; (4+2*i)*(5+3*i)
(14, 22)
&gt; (4+2*i)^60
(-964275081903216557328422924784146317312,
  472329409445772258729579365571477110784)
&gt; (4+2i)^60
-9.64275e+38+4.72329e+38i
</pre>

<h2 id="Destructors">Destructors</h2>
<p>Sometimes it is necessary to call a destructor function
before an object is deleted. Such an destructor function
can be specified right after an object is constructed.
If can be contained in the object's type, but must be
assigned to the object explicitly.
</p>

<pre class="moss">
function ship(id,vmax)
  t = table Ship{id=id}
  destructor(t) = Ship.delete
end

Ship = table{
  color = "gray blue",
  engine = "diesel",
  function string
    "{} (ship, {})"%[self.id, self.color]
  end,
  function delete
    print("Disposal of ", self.id)
  end
}

function main
  x = ship("Bristol")
  print(x)
end

main()
# Output:
# Bristol (ship, gray blue)
# Disposal of Bristol
</pre>

<h2 id="Read-only">Read-only properties</h2>

<p>Sometimes only methods that belong to the object should have write
access to a property. Such a close relationship of the object
to its methods can be achieved by a closure-binding of an interal
private property table.

<pre class="moss">
Ship = object()

function ship
  private_tab = {color = "blue"}
  return table Ship{
    function get(property)
      return private_tab[property]
    end,
    function change_color
      private_tab["color"] = "green"
    end
  }
end

Bristol = ship()
print(Bristol.get("color"))
Bristol.change_color()
print(Birstol.get("color"))
</pre>
<p>Every method that has direct access to <code>private_tab</code>
must belong to <code>ship</code> and not to its
type <code>Ship</code>.

<h2 id="Private">Private properties</h2>

<p>Private properties are constructed the same way as read-only
properties. Only methods that belong to the object should be able
to see the properties.

<pre class="moss">
Ship = object()

function ship
  private_tab = {color = "blue"}
  return table Ship{
    function info
      return "A {} ship." % private_tab["color"]
    end,
    function change_color
      private_tab["color"] = "green"
    end
  }
end

Bristol = ship()
print(Bristol.info())
Bristol.change_color()
print(Bristol.info())
</pre>


</body>
</html>


