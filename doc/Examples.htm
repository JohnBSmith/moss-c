<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Examples</title>
  <link rel="stylesheet" href="css/main.css">
  <script src = "js/syntax.js">
  </script>
</head>
<body>

<h1>Examples</h1>

<div class="toc">
<h2 id="toc">Table of contents</h2>
<ol>
<li><a href="#fac">Factorial</a>
<li><a href="#fib">Fibonacci sequence</a>
<li><a href="#collatz">Collatz conjecture</a>
<li><a href="#fc">Function composition</a>
<li><a href="#pa">Partial application</a>
<li><a href="#currying">Currying</a>
<li><a href="#rn">Random numbers</a>
<li><a href="#stat">Statistics</a>
<li><a href="#qsort">Quicksort</a>
<li><a href="#msort">Mergesort</a>
<li><a href="#cl">Combinatory logic</a>
<li><a href="#sets">Set theory</a>
<li><a href="#comb">Combinatorics</a>
<li><a href="#numerics">Numerics</a>
<li><a href="#Euler">Euler method</a>
<li><a href="#Lorenz">Lorenz attractor</a>
<li><a href="#la">Linear algebra</a>
<li><a href="#dg">Differential geometry</a>
<li><a href="#nt">Number theory</a>
<li><a href="#basic">Basic algorithms</a>
<li><a href="#ms">Mandelbrot set</a>
<li><a href="#rot13">ROT13</a>
<li><a href="#fft">FFT</a>
<li><a href="#lex">Lexical analysis</a>
<li><a href="#calc">Postfix calculator</a>
</ol>
</div>

<h2 id="fac">Factorial</h2>

<pre class="moss">
# Iterative
fac = sub|n|
  p=1
  for i in 1..n
    p=p*i
  end
  return p
end

# Recursive
fac = |n| 1 if n==0 else n*fac(n-1)

# Functional
fac = |n| (1..n).reduce(1,|x,y| x*y)

# Functional iteration
Fac = |t| [t[0]+1,t[1]*(t[0]+1)]
fac = |n| (Fac^n)([0,1])[1]

# Corecursion
Fac = |t| [t[0]+1,t[1]*(t[0]+1)]
fac = |n| Fac.orbit([0,1]).omit(n)()[1]

# Semifunctional iteration
f = sub|n| i=0; (sub|x| i=i+1; x*i end^n)(1) end

# As a product
fac = |n| (1..n).prod()

# Recursive, by application of the fixed-point combinator
fix = |F| sub g|n| F(g,n) end
fac = fix(|f,n| 1 if n==0 else n*f(n-1))

# Tail-recursive
sub call(f,m,n)
  x=f(m,n)
  while type(x) is Function
    x=x()
  end
  return x
end

Fac = |m,n| m if n==0 else || Fac(m*n,n-1)
fac = |n| call(Fac,1,n)

# Solve the functional equation
sub solve(g,m,f0)
  a = list(0..m)
  a[0]=f0
  f = |x| a[x]
  for n in 1..m
    s=0
    while not g(f,n)
      s=s+1
      a[n]=s
      # print(a)
    end
  end
  return f
end

fac = sub|m|
  g = |f,n| f(n)==n*f(n-1)
  return solve(g,m,1)(m)
end

# Construct the list of permutations
fac = |n| size((list(1..n)^n).filter(|t| (1..n).all(|x| x in t)))

# Tacit programming
compose = |f| |g| |x| f(g(x))
reduce  = |f| |e| |a| a.reduce(e,f)
range   = |a| |b| list(a..b)
mpy     = |x,y| x*y

fac = compose(reduce(mpy)(1))(range(1))
</pre>

<h2 id="fib">Fibonacci sequence</h2>

<pre class="moss">
# Recursive
sub memo(f)
  m={}
  return sub|n|
    if n not in m then m[n]=f(n) end
    return m[n]
  end
end

fib = |n| 1 if n in 1..2 else fib(n-1)+fib(n-2)
fib = memo(fib)

# Functional iteration
Fib = |x| [x[0]+x[1],x[0]]
fib = |n| (Fib^(n-1))([1,1])[1]

# By a general algorithm for
# a(n):=f(n,a(n-2),a(n-1))
rec = |a0,a1,f| sub|n|
  x,y=a0,a1
  for k in n
    x,y=y,f(k,x,y)
  end
  return x
end
fib = rec(0,1,|n,x,y| x+y)
</pre>

<h2 id="collatz">Collatz conjecture</h2>
<pre class="moss">
Collatz = |n| n//2 if n%2==0 else 3*n+1

for x in 1..20
  a = Collatz.orbit(x).until(|n| n==1).list()
  print(a)
end

sub tab(m)
  d = {}
  for x in 1..m
    i = Collatz.orbit(x)
    a = i()
    for b in i
      if b in d
        d[b].add(a)
        break
      end
      d[b] = {a}
      a = b
    end
  end
  d[4] = {8}
  return d
end

sub tree(n,d,s,max)
  if s&lt;max
    print("| "*s,n)
    if n in d
      for x in list(d[n]).sort()
        tree(x,d,s+1,max)
      end
    end
  end
end

tree(1,tab(100),0,20)
</pre>


<h2 id="fc">Function composition</h2>
<pre class="moss">
compose = |f,g| |x| f(g(x))
f = |x| 2*x
print(compose(f,f)(10))

Function.MPY = |f;g| |x| f(g(x))
print((f*f*f)(10))
</pre>


<h2 id="pa">Partial application</h2>
<pre class="moss">
first = |f,x| |y| f(x,y)
second = |f,y| |x| f(x,y)

# variadic, fix first arguments
first = |f,*a| |*b| f.apply(a+b)

# variadic, fix last arguments
last = |f,*a| |*b| f.apply(b+a)
</pre>


<h2 id="currying">Currying</h2>
<pre class="moss">
curry = sub|f|
  n=f.argc()
  a=list(0..n-1)
  g = sub|x| a[n-1]=x; f.apply(a) end
  for i in 2..n
    g = sub|x| a[n-i]=x; g end
  end
  return g
end

curry = sub|f| n=f.argc(); a=list(0..n-1)
  return (2..n).reduce(sub|x| a[n-1]=x; f.apply(a)
  end, |g,i| sub|x| a[n-i]=x; g end) end

uncurry = |f| |*a| a.reduce(f,|g,x| g(x))
</pre>


<h2 id="rn">Random numbers</h2>
<pre class="moss">
# 100 samples of a standard dice
a = rand(1..6).list(100)
print(a)

# shuffle a list
a = list(1..100).shuffle()
print(a)
</pre>


<h2 id="stat">Statistics</h2>
<pre class="moss">
use math: sqrt

# Mean value
mean = |a| a.sum()/size(a)
print(mean(1..4))
print(mean(rand(0,1).list(1000)))

# Estimated standard deviation
sub sigma(a) m=mean(a)
  sqrt(a.sum(|x| (x-m)^2)/(size(a)-1))
end

# Variance
sub var(a) m=mean(a)
  a.sum(|x| (x-m)^2)/size(a)
end

# Covariance
sub cov(a,b) ma=mean(a); mb=mean(b)
  map(a,b,|x,y| (x-ma)*(y-mb)).sum()/size(a)
end

# Covariance matrix
cov_matrix = |X| X.map(|a| X.map(|b| cov(a,b)))

# Pairwise summation
sub sum(a)
  while size(a)>3
    a = a.chunks(2).map(|t| t.sum())
  end
  return a.sum()
end

# Pairwise summation,
# traditional algorithm
sub sum(a)
  m=size(a)
  while m!=1
    i=0
    for k in 0..m-2: 2
      a[i] = a[k]+a[k+1]
      i++
    end
    if m%2!=0
      a[i]=a[m-1]
      i++
    end
    m=i
  end
  return a[0]
end
</pre>


<h2 id="qsort">Quicksort</h2>

<pre class="moss">
qsort = |a| ([] if size(a)==0 else
  qsort(a[1..].filter(|x| x&lt;a[0]))+[a[0]]+
  qsort(a[1..].filter(|x| x&gt;=a[0])))

# Test function
issorted = |a| (0..size(a)-2).all(|i| a[i]&lt;=a[i+1])

# Alternative form
sub qsort(a)
  return [] if size(a)==0 else begin
    R,L=[],[]
    a[1..].each(|x| (R if x&lt;a[0] else L).push(x))
    return [R,L].map(qsort)
  end.reduce(|R,L| R+[a[0]]+L)
end
</pre>

<h2 id="msort">Mergesort</h2>

<pre class="moss">
msort = |a| (copy(a) if size(a)&lt;=1 else
  merge(msort(a[1..:2]),msort(a[0..:2])))

merge = sub|L,R| y=[]
  while size(L)!=0 and size(R)!=0
    y.push((L if L[-1]&gt;R[-1] else R).pop())
  end
  return L+R+y.rev()
end
</pre>


<h2 id="cl">Combinatory logic</h2>

<pre class="moss">
I = |x| x
K = |x| |y| x
Y = |F| (|x| x(x))(|x| F(|n| x(x)(n)))
Y = |F| sub g|n| F(g)(n) end
S = |f| |x| |u| f(u)(x(u))
B = |f| |g| |x| f(g(x))
C = |f| |x| |u| f(u)(x)

# Y-Combinator without currying
Y = |F| sub g|n| F(g,n) end

# Y-Combinator with memoization
Y = sub|F|
  m={}
  return sub g|n|
    if n not in m then m[n]=F(g,n) end
    return m[n]
  end
end
</pre>

<h2 id="sets">Set theory</h2>

<pre class="moss">
# Powerset
P = |a| a.reduce({{}},|p,x| p|set(p.map(|s| s|{x})))

# Remove duplicates from a list
uniq = |a| list(set(a))

# Quotient set
partition = |a,R| set(list(a).chunks(R))

# Obtain the equivalence relation of a quotient set Q
relation = |Q| |x,y| Q.any(|a| x in a and y in a)

# Obtain the equivalence class
# of a quotient set Q and representative x
class = |Q,x| Q.find(|a| x in a)
</pre>

<h2 id="comb">Combinatorics</h2>

<pre class="moss">
# Permutations
perm = sub|a|
  if size(a)==0
    return [[]]
  end
  b=[]
  for i in 0..size(a)-1
    for x in perm(a[..i-1]+a[i+1..])
      b.push([a[i]]+x)
    end
  end
  return b
end

perm(list("abc")).map(|a| a.join()).each(print)
# abc
# acb
# bac
# bca
# cab
# cba

# Permutations with repetitions
(list("abc")^3).map(|a| a.join()).each(print)
# aaa
# aab
# ...
# ccc
</pre>


<h2 id="numerics">Numerics</h2>

<pre class="moss">
# Square root
sqrt = |a| ((|x| 0.5*(x+a/x))^10)(1)

# Differential operator
D = begin h=0.001
  |f| |x| (f(x+h)-f(x-h))/(2*h)
end

f = |x| x^3+2*x
f1 = D(f)
f2 = D(D(f))
f2 = (D^2)(f)

# Simpson's rule
int = sub|f,a,b,n|
  h = (b-a)/n
  y=0
  for i in 0..n-1
    x = a+h*i
    y = y+f(x)+4*f(x+0.5*h)+f(x+h)
  end
  return y*h/6
end

int = sub|f,a,b,n| h=(b-a)/n
  list(n).map(|i| a+h*i).sum(|x| f(x)+4*f(x+0.5*h)+f(x+h))*h/6
end

# Newton's method
N = sub|f,x|
  f1 = D(f)
  for i in 1..20
    x=x-f(x)/f1(x)
  end
  return x
end

N = sub|f,x|
  f1 = D(f)
  phi = |t| t-f(t)/f1(t)
  return (phi^20)(x)
end
</pre>

<h2 id="Euler">Euler method</h2>

<pre class="moss">
use na: interpolate

# f'(x)=g(x,f(x))
# h: step size
# N: number of steps
sub euler(g,x0,y0,h,N)
  x=x0; y=y0
  a=[[x,y]]
  for k in 1..N
    y = y+h*g(x,y)
    x = x0+k*h
    a.push([x,y])
  end
  return interpolate(a)
end

# f^(m)(x) = g(x,y)
# y = [f(x),f'(x),...,f^(m-1)(x)]
sub euler_any_order(g,x0,y0,h,N)
  x=x0; y=copy(y0)
  m=size(y)
  a=[[x,y[0]]]
  for k in 1..N
    hg = h*g(x,y)
    for i in 0..m-2
      y[i] = y[i]+h*y[i+1]
    end
    y[m-1] = y[m-1]+hg
    x = x0+k*h
    a.push([x,y[0]])
  end
  return interpolate(a)
end

exp = euler(|x,y| y,
  0, 1, 0.01, 1000)
sin = euler_any_order(|x,y| -y[0],
  0, [0,1], 0.01, 1000)
</pre>

<h2 id="Lorenz">Lorenz attractor</h2>
<pre class="moss">
use ode
use plotlib: system

x,y,z = ode.runge_kutta_system({
  g = sub|t,v| x,y,z=v
    [10*(y-x),
     x*(28-z)-y,
     x*y-8/3*z]
  end,
  t0=0, y0=[1,1,1],
  w=40, "unilateral"
})

s = system({wx=50, wy=50, py=20})
s.vplot(|t| [x(t),z(t)],{
  t1=0, t2=40, n=80000
})
s.idle()
</pre>

<h2 id="la">Linear algebra</h2>

<pre class="moss">
# Jacobi method
use la: hv, hm, diag

sub Jacobi(A,b)
  d = A.diag()
  Dinv = diag(d.map(|x| 1/x))
  R = A-diag(d)
  x=b
  for k in 80
    x = Dinv*(b-R*x)
  end
  return x
end

A = hm(
  [4,1,2],
  [2,6,1],
  [1,3,9]
)
b = hv(1,2,3)
x = Jacobi(A,b)
print(x)
print(A*x-b)

# Determinant of a square matrix
use la: trace

sub det(A)
  a,b,c = [1,2,3].map(|k| trace(A^k))
  return a^3/6-a*b/2+c/3
end

# Matrix exponential
use math: fac
use la: hm

exp = |A| (0..20).sum(|k| A^k/fac(k))
A = hm([1,2],[3,4])
B = exp(A)
</pre>

<h2 id="dg">Differential geometry</h2>
<pre class="moss">
# Tangential and normal vector
use plotlib: system
use math: exp, sqrt, pi, sin, cos
use la: hv, hm, ha
use na: diff, integral

# Rotation matrix
rot = |phi| hm(
  [cos(phi),-sin(phi)],
  [sin(phi), cos(phi)]
)

# Unit vector
unit = |v| v/sqrt(v*v)

TN = begin R=rot(90*pi/180)
  |f| [|t| unit(diff(f,t)),|t| R*unit(diff(f,t))]
end

f = |t| 2*hv(cos(t),sin(t))
T,N = TN(f)

s = system({t1=0, t2=2*pi})
s.vplot([f,T])
s.idle()

# Arc length
# g: representation matrix of a metric tensor
sub length(I,g,f)
  integral(I[0],I[1],sub|t| v=diff(f,t); sqrt(g(f(t))*v*v) end)
end
# One could define g as a function and use
# g(f(t),v,v) or g(f(t))(v,v) instead of g(f(t))*v*v.
# But note, this is a bogus abstraction, because v is a
# representation that is induced by a coordinate chart.
# So g has to be given for the frame that is induced by the
# same coordinate chart.

# Directional derivative
D = |v,f,x| diff(|t| f(x+t*v),0)

# One can expand this into:
D = begin h=0.001
  |v,f,x| (f(x+h*v)-f(x-h*v))/(2*h)
end

# Standard basis
sub basis(n,k)
  v=[0]*n; v[k]=1
  return ha(v)
end

# Jacobian matrix
sub Jacobi(m,n)
  E = list(0..n-1).map(|k| basis(n,k))
  return |F,u| ha(
    list(0..m-1).map(|i|
      list(0..n-1).map(|j| D(E[j],F[i],u))))
end

# Metric tensor
sub metric(m,n,F)
  D = Jacobi(m,n)
  return sub|u|
    J = D(F,u)
    return J.T()*J
  end
end

# Polar coordinates
# u = hv(r,phi)
F = [
  |u| u[0]*cos(u[1]),
  |u| u[0]*sin(u[1])
]
g = metric(2,2,F)

# Logarithmic spiral
# r(phi) = a*exp(k*phi)
# a=1, k=0.2
f = |t| hv(exp(0.2*t),t)

# lim(n to inf) length([-2*n*pi,0],g,f)
# = sqrt(1+k^2)/k = 5.0990... 
L = length([-200*pi,0],g,f)
print(L)
</pre>


<h2 id="nt">Number theory</h2>

<pre class="moss">
# A prime is a number that has two divisors.
isprime = |n| (1..n).count(|k| n%k==0)==2

# A slightly faster algorithm.
isprime = |n| n&gt;1 and (2..n-1).all(|k| n%k!=0)

# The basic idea to speed it up.
isprime = |n| n&gt;1 and (2..).until(|k| k*k&gt;n).all(|k| n%k!=0)

# Print all the primes in 1..100.
print(list(1..100).filter(isprime))

# Print the first 100 primes.
print((1..).filter(isprime).list(100))

# Sieve of Eratosthenes
sieve = |a| ([] if size(a)==0 else
  [a[0]]+sieve(a[1..].filter(|x| x%a[0]!=0)))

print(sieve(list(2..100)))

# Greatest common divisor
gcd = |a,b| a if b==0 else gcd(b,a%b)

sub gcd(a,b)
  while b!=0 do a,b=b,a%b end
  return a
end

# Least common multiple
lcm = |a| a.reduce(|x,y| x*y//gcd(x,y))

# (a^n)%m (built-in as pow(a,n,m))
sub powmod(a,n,m)
  y=1; a=a%m
  while n&gt;0
    if n%2==0
      n=n//2; a=(a*a)%m
    else
      n=n-1; y=(y*a)%m
    end
  end
  return y
end

# List of divisors
divisors = |n| list(1..n).filter(|k| n%k==0)

# Divisor function
sigma = |x,n| (1..n).filter(|k| n%k==0).sum(|k| k^x)

sigma0 = |n| (1..n).count(|k| n%k==0)

# Prime factorization
factor = |n| (list(2..n).filter(|k| n%k==0 and isprime(k))
  .map(|p| [p,(1..).until(|k| n%(p^k)!=0).count()]))

# Zeller's congruence
begin
  w = ["Satur", "Sun", "Mon", "Tues", "Wednes", "Thurs", "Fri"]
  global day_of_the_week
  sub day_of_the_week(d,m,a)
    J = a//100
    K = (a if m in 3..12 else a-1)%100
    m = (m if m in 3..12 else m+12)
    n = (d + (m+1)*13//5 + K + K//4 + J//4 - 2*J)%7
    return w[n]+"day"
  end
end
</pre>


<h2 id="basic">Basic algorithms</h2>

<pre class="moss">
# Any base
integer = |s,b| s.reduce(0,|x,c| b*x+ord(c)-ord('0'))
base = |n,b| "0" if x==0 else base(n//b,b)+chr(n%b+ord('0'))

base = sub|n,b|
  s = "0" if n==0 else ""
  while n!=0
    s=chr(n%b+ord('0'))+s
    n=n//b
  end
  return s
end

# Abstract version (mathematically pure)
base = |n,b| [] if n==0 else base(n//b,b)+[n%b]

# Custom digits
base = sub|n,s| b=size(s)
  s[n] if n&lt;b else base(n//b,s)+s[n%b]
end

# Reverse
rev = sub|a|
  n=size(a)-1
  for i in 0..size(a)//2-1
    a.swap(i,n-i)
    # a[i],a[n-i] = a[n-i],a[i]
  end
end
</pre>


<h2 id="ms">Mandelbrot set</h2>

<pre class="moss">
(0..25).map(|x|
  (0..39).map(sub|y| c = (x/10-2)+(y/10-2)*1i
    "*" if abs((sub|z| z^2+c end^10)(0))&lt;2 else "\s"
  end).join()).each(print)
</pre>


<h2 id="rot13">ROT13</h2>

<pre class="moss">
begin
  a = ord('a'); A = ord('A')
  global rot13
  rot13 = |s| s.map(|c|
    chr((ord(c)-a+13)%26+a) if c in 'a'..'z' else
    chr((ord(c)-A+13)%26+A) if c in 'A'..'Z' else
    c).join()
end
</pre>

<h2 id="fft">FFT</h2>

<pre class="moss">
use math: pi
use cmath: exp

# size(a) is a power of two
fft = sub|a| if size(a)&lt;=1 then return a end
  even = fft(a[0..:2]); odd = fft(a[1..:2])
  N = size(a); L = list(0..N//2-1)
  T = L.map(|k| exp(-2i*pi*k/N)*odd[k])
  return (L.map(|k| even[k]+T[k])+
          L.map(|k| even[k]-T[k])) end
</pre>


<h2 id="lex">Lexical analysis</h2>
<pre class="moss">
# Simple tokenizer

syntax_error = object()

sub scan(s)
  a=[]
  i=0; n=size(s)
  while i&lt;n
    if s[i] in "+-*/^(){}[];,"
      a.push(s[i])
      i++
    elif s[i].isalpha()
      j=i
      while i&lt;n and s[i].isalnum()
        i++
      end
      a.push(s[j..i-1])
    elif s[i].isdigit()
      j=i
      while i&lt;n and s[i].isdigit()
        i++
      end
      a.push(s[j..i-1])
    elif s[i].isspace()
      i++
    else
      raise table[syntax_error]
        value="unexpected character: '"+s[i]+"'"
      end
    end
  end
  return a
end

while true
  s = input("&gt; ")
  try
    print(scan(s))
  catch e: syntax_error
    print("Syntax error: ", e.value, ".")
  end
end

# Without syntax errors
use re
regex = re.compile("{d}+ | {a}({a}|{d})* | [+-*/^(){}[];,]")
scan = |s| regex.list(s)
</pre>


<h2 id="calc">Postfix calculator</h2>
<pre class="moss">
use re
unary={"~": |x| -x}; binary={"+": |x,y| x+y, "-": |x,y| x-y,
  "*": |x,y| x*y, "/": |x,y| x/y, "^": |x,y| x^y}

regex = re.compile("{d}+({.}{d}*)?|[+-*/^~]")

calc = |s| regex.list(s).reduce([],|a,x|
  a+[float(x)] if x[0].isdigit() else
  a[..-2]+[unary[x](a[-1])] if x in unary else
  a[..-3]+[binary[x](a[-2],a[-1])]
)[-1]

(|| calc(input("&gt;\s"))).each(print)
</pre>

</body>
</html>

